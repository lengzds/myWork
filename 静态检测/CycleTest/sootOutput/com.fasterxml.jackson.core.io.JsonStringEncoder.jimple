public final class com.fasterxml.jackson.core.io.JsonStringEncoder extends java.lang.Object
{
    private static final byte[] HEX_BYTES;
    private static final char[] HEX_CHARS;
    protected static final java.lang.ThreadLocal _threadEncoder;
    protected final char[] _quoteBuffer;
    protected com.fasterxml.jackson.core.util.TextBuffer _textBuffer;

    static void <clinit>()
    {
        char[] $r0;
        byte[] $r1;
        java.lang.ThreadLocal $r2;

        $r0 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: char[] copyHexChars()>();

        <com.fasterxml.jackson.core.io.JsonStringEncoder: char[] HEX_CHARS> = $r0;

        $r1 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: byte[] copyHexBytes()>();

        <com.fasterxml.jackson.core.io.JsonStringEncoder: byte[] HEX_BYTES> = $r1;

        $r2 = new java.lang.ThreadLocal;

        specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>();

        <com.fasterxml.jackson.core.io.JsonStringEncoder: java.lang.ThreadLocal _threadEncoder> = $r2;

        return;
    }

    public void <init>()
    {
        com.fasterxml.jackson.core.io.JsonStringEncoder $r0;
        char[] $r1;

        $r0 := @this: com.fasterxml.jackson.core.io.JsonStringEncoder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[6];

        $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer> = $r1;

        $r1 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        $r1[0] = 92;

        $r1 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        $r1[2] = 48;

        $r1 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        $r1[3] = 48;

        return;
    }

    private int _appendSingleEscape(int, char[])
    {
        com.fasterxml.jackson.core.io.JsonStringEncoder $r0;
        int $i0, $i1;
        char[] $r1, $r2;
        char $c2;

        $r0 := @this: com.fasterxml.jackson.core.io.JsonStringEncoder;

        $i0 := @parameter0: int;

        $r1 := @parameter1: char[];

        if $i0 >= 0 goto label1;

        $i0 = $i0 + 1;

        $i1 = neg $i0;

        $r1[1] = 117;

        $r2 = <com.fasterxml.jackson.core.io.JsonStringEncoder: char[] HEX_CHARS>;

        $i0 = $i1 >> 4;

        $c2 = $r2[$i0];

        $r1[4] = $c2;

        $r2 = <com.fasterxml.jackson.core.io.JsonStringEncoder: char[] HEX_CHARS>;

        $i0 = $i1 & 15;

        $c2 = $r2[$i0];

        $r1[5] = $c2;

        return 6;

     label1:
        $c2 = (char) $i0;

        $r1[1] = $c2;

        return 2;
    }

    public static com.fasterxml.jackson.core.io.JsonStringEncoder getInstance()
    {
        java.lang.ThreadLocal $r0;
        java.lang.ref.SoftReference $r1;
        java.lang.Object $r2;
        com.fasterxml.jackson.core.io.JsonStringEncoder $r3;

        $r0 = <com.fasterxml.jackson.core.io.JsonStringEncoder: java.lang.ThreadLocal _threadEncoder>;

        $r2 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r1 = (java.lang.ref.SoftReference) $r2;

        if $r1 != null goto label2;

        $r3 = null;

     label1:
        if $r3 != null goto label3;

        $r3 = new com.fasterxml.jackson.core.io.JsonStringEncoder;

        specialinvoke $r3.<com.fasterxml.jackson.core.io.JsonStringEncoder: void <init>()>();

        $r0 = <com.fasterxml.jackson.core.io.JsonStringEncoder: java.lang.ThreadLocal _threadEncoder>;

        $r1 = new java.lang.ref.SoftReference;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r3);

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return $r3;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.ref.SoftReference: java.lang.Object get()>();

        $r3 = (com.fasterxml.jackson.core.io.JsonStringEncoder) $r2;

        goto label1;

     label3:
        return $r3;
    }

    public final char[] quoteAsString(java.lang.String)
    {
        com.fasterxml.jackson.core.io.JsonStringEncoder $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        com.fasterxml.jackson.core.util.TextBuffer $r2;
        char[] $r3, $r5, $r6;
        int[] $r4;
        char $c4;

        $r0 := @this: com.fasterxml.jackson.core.io.JsonStringEncoder;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        if $r2 != null goto label01;

        $r2 = new com.fasterxml.jackson.core.util.TextBuffer;

        specialinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: void <init>(com.fasterxml.jackson.core.util.BufferRecycler)>(null);

        $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: com.fasterxml.jackson.core.util.TextBuffer _textBuffer> = $r2;

     label01:
        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: char[] emptyAndGetCurrentSegment()>();

        $r4 = staticinvoke <com.fasterxml.jackson.core.io.CharTypes: int[] get7BitOutputEscapes()>();

        $i0 = lengthof $r4;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = 0;

        $i3 = 0;

     label02:
        if $i3 >= $i1 goto label06;

     label03:
        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        if $c4 >= $i0 goto label04;

        $i5 = $r4[$c4];

        if $i5 != 0 goto label07;

     label04:
        $i5 = lengthof $r3;

        if $i2 < $i5 goto label10;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        $i5 = 0;

     label05:
        $i2 = $i5 + 1;

        $r3[$i5] = $c4;

        $i3 = $i3 + 1;

        if $i3 < $i1 goto label03;

     label06:
        virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: void setCurrentLength(int)>($i2);

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: char[] contentsAsArray()>();

        return $r3;

     label07:
        $i5 = $i3 + 1;

        $c4 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        $i3 = $r4[$c4];

        $r5 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        $i3 = specialinvoke $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: int _appendSingleEscape(int,char[])>($i3, $r5);

        $i6 = $i2 + $i3;

        $i7 = lengthof $r3;

        if $i6 <= $i7 goto label09;

        $i6 = lengthof $r3;

        $i6 = $i6 - $i2;

        if $i6 <= 0 goto label08;

        $r5 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r3, $i2, $i6);

     label08:
        $r5 = virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: char[] finishCurrentSegment()>();

        $r3 = $r5;

        $i3 = $i3 - $i6;

        $r6 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i6, $r5, $i2, $i3);

        $i2 = $i2 + $i3;

        $i3 = $i5;

        goto label02;

     label09:
        $r5 = $r0.<com.fasterxml.jackson.core.io.JsonStringEncoder: char[] _quoteBuffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r3, $i2, $i3);

        $i2 = $i2 + $i3;

        $i3 = $i5;

        goto label02;

     label10:
        $i5 = $i2;

        goto label05;
    }
}

abstract class com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer
{

    public void <init>(java.lang.Class)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        java.lang.Class $r1;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: void <init>(java.lang.Class)>($r1);

        return;
    }

    protected void _handleDuplicateField(java.lang.String, com.fasterxml.jackson.databind.node.ObjectNode, com.fasterxml.jackson.databind.JsonNode, com.fasterxml.jackson.databind.JsonNode)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        java.lang.String $r1;
        com.fasterxml.jackson.databind.node.ObjectNode $r2;
        com.fasterxml.jackson.databind.JsonNode $r3, $r4;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.fasterxml.jackson.databind.node.ObjectNode;

        $r3 := @parameter2: com.fasterxml.jackson.databind.JsonNode;

        $r4 := @parameter3: com.fasterxml.jackson.databind.JsonNode;

        return;
    }

    protected final com.fasterxml.jackson.databind.JsonNode deserializeAny(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.node.JsonNodeFactory)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.databind.node.JsonNodeFactory $r3;
        int[] $r4;
        com.fasterxml.jackson.core.JsonToken $r5;
        int $i0;
        java.lang.Class $r6;
        com.fasterxml.jackson.databind.JsonMappingException $r7;
        com.fasterxml.jackson.databind.node.ObjectNode $r8;
        com.fasterxml.jackson.databind.node.ArrayNode $r9;
        java.lang.Object $r10;
        com.fasterxml.jackson.databind.node.NullNode $r11;
        byte[] $r12;
        com.fasterxml.jackson.databind.node.BinaryNode $r13;
        com.fasterxml.jackson.databind.node.POJONode $r14;
        java.lang.String $r15;
        com.fasterxml.jackson.databind.node.TextNode $r16;
        com.fasterxml.jackson.core.JsonParser$NumberType $r17, $r18;
        com.fasterxml.jackson.databind.DeserializationFeature $r19;
        boolean $z0;
        java.math.BigInteger $r20;
        com.fasterxml.jackson.databind.node.NumericNode $r21;
        long $l1;
        java.math.BigDecimal $r22;
        double $d0;
        com.fasterxml.jackson.databind.node.BooleanNode $r23;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 := @parameter2: com.fasterxml.jackson.databind.node.JsonNodeFactory;

        $r4 = <com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r5.<com.fasterxml.jackson.core.JsonToken: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label08;
            case 4: goto label01;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label09;
            case 8: goto label13;
            case 9: goto label16;
            case 10: goto label17;
            case 11: goto label18;
            default: goto label01;
        };

     label01:
        $r6 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: java.lang.Class getValueClass()>();

        $r7 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class)>($r6);

        throw $r7;

     label02:
        $r8 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        return $r8;

     label03:
        $r9 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ArrayNode deserializeArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        return $r9;

     label04:
        $r8 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        return $r8;

     label05:
        $r10 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.Object getEmbeddedObject()>();

        if $r10 != null goto label06;

        $r11 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>();

        return $r11;

     label06:
        $r6 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 != class "[B" goto label07;

        $r12 = (byte[]) $r10;

        $r13 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.BinaryNode binaryNode(byte[])>($r12);

        return $r13;

     label07:
        $r14 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.POJONode POJONode(java.lang.Object)>($r10);

        return $r14;

     label08:
        $r15 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r16 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.TextNode textNode(java.lang.String)>($r15);

        return $r16;

     label09:
        $r17 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r18 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        if $r17 == $r18 goto label10;

        $r19 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature USE_BIG_INTEGER_FOR_INTS>;

        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>($r19);

        if $z0 == 0 goto label11;

     label10:
        $r20 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        $r21 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(java.math.BigInteger)>($r20);

        return $r21;

     label11:
        $r18 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if $r17 != $r18 goto label12;

        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        $r21 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(int)>($i0);

        return $r21;

     label12:
        $l1 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        $r21 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(long)>($l1);

        return $r21;

     label13:
        $r17 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r18 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        if $r17 == $r18 goto label14;

        $r19 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature USE_BIG_DECIMAL_FOR_FLOATS>;

        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>($r19);

        if $z0 == 0 goto label15;

     label14:
        $r22 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.math.BigDecimal getDecimalValue()>();

        $r21 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(java.math.BigDecimal)>($r22);

        return $r21;

     label15:
        $d0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();

        $r21 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NumericNode numberNode(double)>($d0);

        return $r21;

     label16:
        $r23 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.BooleanNode booleanNode(boolean)>(1);

        return $r23;

     label17:
        $r23 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.BooleanNode booleanNode(boolean)>(0);

        return $r23;

     label18:
        $r11 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>();

        return $r11;
    }

    protected final com.fasterxml.jackson.databind.node.ArrayNode deserializeArray(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.node.JsonNodeFactory)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.databind.node.JsonNodeFactory $r3;
        int[] $r4;
        com.fasterxml.jackson.databind.node.ArrayNode $r5, $r10;
        com.fasterxml.jackson.core.JsonToken $r6;
        com.fasterxml.jackson.databind.JsonMappingException $r7;
        int $i0;
        com.fasterxml.jackson.databind.JsonNode $r8;
        com.fasterxml.jackson.databind.node.ObjectNode $r9;
        java.lang.String $r11;
        com.fasterxml.jackson.databind.node.TextNode $r12;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 := @parameter2: com.fasterxml.jackson.databind.node.JsonNodeFactory;

        $r5 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ArrayNode arrayNode()>();

     label1:
        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();

        if $r6 != null goto label2;

        $r7 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.String)>("Unexpected end-of-input when binding data into ArrayNode");

        throw $r7;

     label2:
        $r4 = <com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;

        $i0 = virtualinvoke $r6.<com.fasterxml.jackson.core.JsonToken: int ordinal()>();

        $i0 = $r4[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label3;
        };

     label3:
        $r8 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode deserializeAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        virtualinvoke $r5.<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)>($r8);

        goto label1;

     label4:
        $r9 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        virtualinvoke $r5.<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)>($r9);

        goto label1;

     label5:
        $r10 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ArrayNode deserializeArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        virtualinvoke $r5.<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)>($r10);

        goto label1;

     label6:
        $r11 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r12 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.TextNode textNode(java.lang.String)>($r11);

        virtualinvoke $r5.<com.fasterxml.jackson.databind.node.ArrayNode: com.fasterxml.jackson.databind.node.ArrayNode add(com.fasterxml.jackson.databind.JsonNode)>($r12);

        goto label1;

     label7:
        return $r5;
    }

    protected final com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.node.JsonNodeFactory)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.databind.node.JsonNodeFactory $r3;
        com.fasterxml.jackson.databind.node.ObjectNode $r4;
        com.fasterxml.jackson.core.JsonToken $r5, $r6, $r7;
        java.lang.String $r8, $r14;
        int[] $r9;
        int $i0;
        com.fasterxml.jackson.databind.JsonNode $r10, $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 := @parameter2: com.fasterxml.jackson.databind.node.JsonNodeFactory;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>();

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r6 = $r5;

        $r7 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r5 != $r7 goto label1;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();

     label1:
        $r5 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r6 != $r5 goto label8;

        $r8 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getCurrentName()>();

        $r9 = <com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();

        $i0 = virtualinvoke $r6.<com.fasterxml.jackson.core.JsonToken: int ordinal()>();

        $i0 = $r9[$i0];

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label6;
            case 3: goto label7;
            default: goto label2;
        };

     label2:
        $r10 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.JsonNode deserializeAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

     label3:
        $r11 = virtualinvoke $r4.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode put(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>($r8, $r10);

        if $r11 == null goto label4;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: void _handleDuplicateField(java.lang.String,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.databind.JsonNode)>($r8, $r4, $r11, $r10);

     label4:
        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();

        goto label1;

     label5:
        $r10 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ObjectNode deserializeObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        goto label3;

     label6:
        $r10 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer: com.fasterxml.jackson.databind.node.ArrayNode deserializeArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.node.JsonNodeFactory)>($r1, $r2, $r3);

        goto label3;

     label7:
        $r14 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r10 = virtualinvoke $r3.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.TextNode textNode(java.lang.String)>($r14);

        goto label3;

     label8:
        return $r4;
    }

    public java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
    {
        com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer $r3;
        java.lang.Object $r4;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 := @parameter2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.databind.jsontype.TypeDeserializer: java.lang.Object deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        return $r4;
    }
}

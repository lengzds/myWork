public class com.fasterxml.jackson.databind.ser.std.DateSerializer extends com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase
{
    public static com.fasterxml.jackson.databind.ser.std.DateSerializer instance;

    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;

        $r0 = new com.fasterxml.jackson.databind.ser.std.DateSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>()>();

        <com.fasterxml.jackson.databind.ser.std.DateSerializer: com.fasterxml.jackson.databind.ser.std.DateSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>(boolean,java.text.DateFormat)>(0, null);

        return;
    }

    public void <init>(boolean, java.text.DateFormat)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        boolean $z0;
        java.text.DateFormat $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.text.DateFormat;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: void <init>(java.lang.Class,boolean,java.text.DateFormat)>(class "java/util/Date", $z0, $r1);

        return;
    }

    protected volatile long _timestamp(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        long $l0;
        java.lang.Object $r1;
        java.util.Date $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Date) $r1;

        $l0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: long _timestamp(java.util.Date)>($r2);

        return $l0;
    }

    protected long _timestamp(java.util.Date)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        java.util.Date $r1;
        long $l0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $r1 := @parameter0: java.util.Date;

        if $r1 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        return $l0;
    }

    public volatile void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        java.lang.Object $r3;
        java.util.Date $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (java.util.Date) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: void serialize(java.util.Date,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serialize(java.util.Date, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        java.util.Date $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        java.text.DateFormat $r4, $r5;
        boolean $z0;
        long $l0;
        java.lang.String $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $r1 := @parameter0: java.util.Date;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $z0 = $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: boolean _useTimestamp>;

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: long _timestamp(java.util.Date)>($r1);

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(long)>($l0);

        return;

     label1:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: java.text.DateFormat _customFormat>;

        if $r4 == null goto label5;

        $r4 = $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: java.text.DateFormat _customFormat>;

        entermonitor $r4;

     label2:
        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: java.text.DateFormat _customFormat>;

        $r6 = virtualinvoke $r5.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r6);

        exitmonitor $r4;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r4;

        throw $r7;

     label5:
        virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public com.fasterxml.jackson.databind.ser.std.DateSerializer withFormat(boolean, java.text.DateFormat)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        boolean $z0;
        java.text.DateFormat $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.text.DateFormat;

        if $z0 == 0 goto label1;

        $r0 = new com.fasterxml.jackson.databind.ser.std.DateSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>(boolean,java.text.DateFormat)>(1, null);

        return $r0;

     label1:
        $r0 = new com.fasterxml.jackson.databind.ser.std.DateSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: void <init>(boolean,java.text.DateFormat)>(0, $r1);

        return $r0;
    }

    public volatile com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(boolean, java.text.DateFormat)
    {
        com.fasterxml.jackson.databind.ser.std.DateSerializer $r0;
        boolean $z0;
        java.text.DateFormat $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateSerializer;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.text.DateFormat;

        $r0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateSerializer: com.fasterxml.jackson.databind.ser.std.DateSerializer withFormat(boolean,java.text.DateFormat)>($z0, $r1);

        return $r0;
    }
}

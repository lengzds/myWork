public class com.fasterxml.jackson.databind.type.TypeParser extends java.lang.Object
{
    final com.fasterxml.jackson.databind.type.TypeFactory _factory;

    public void <init>(com.fasterxml.jackson.databind.type.TypeFactory)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        com.fasterxml.jackson.databind.type.TypeFactory $r1;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: com.fasterxml.jackson.databind.type.TypeFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory> = $r1;

        return;
    }

    protected java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer, java.lang.String)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r1;
        java.lang.String $r2, $r5;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to parse type \'");

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getAllInput()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (remaining: \'");

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String getRemainingInput()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'): ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        return $r3;
    }

    protected java.lang.Class findClass(java.lang.String, com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        java.lang.String $r1;
        com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r2;
        java.lang.Class $r3;
        java.lang.Exception $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

     label1:
        $r3 = staticinvoke <com.fasterxml.jackson.databind.util.ClassUtil: java.lang.Class findClass(java.lang.String)>($r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $z0 = $r4 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label4;

        $r5 = (java.lang.RuntimeException) $r4;

        throw $r5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Can not locate class \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', problem: ");

        $r1 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r2, $r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public com.fasterxml.jackson.databind.JavaType parse(java.lang.String)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        java.lang.String $r1;
        com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r2;
        com.fasterxml.jackson.databind.JavaType $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $r2 = new com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        specialinvoke $r2.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r2);

        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r2, "Unexpected tokens after complete type");

        throw $r4;

     label1:
        return $r3;
    }

    protected com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r5;
        java.lang.Class $r4;
        com.fasterxml.jackson.databind.type.TypeFactory $r6;
        java.util.List $r7;
        com.fasterxml.jackson.databind.JavaType $r8;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected end-of-string");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r4 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.Class findClass(java.lang.String,com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r3, $r1);

        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r5 = "<";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r6 = $r0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.util.List parseTypes(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r1);

        $r8 = virtualinvoke $r6.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromParameterizedClass(java.lang.Class,java.util.List)>($r4, $r7);

        return $r8;

     label2:
        virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: void pushBack(java.lang.String)>($r3);

     label3:
        $r6 = $r0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.type.TypeFactory _factory>;

        $r8 = virtualinvoke $r6.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType _fromClass(java.lang.Class,com.fasterxml.jackson.databind.type.TypeBindings)>($r4, null);

        return $r8;
    }

    protected java.util.List parseTypes(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)
    {
        com.fasterxml.jackson.databind.type.TypeParser $r0;
        com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        com.fasterxml.jackson.databind.JavaType $r3;
        java.lang.String $r4, $r5;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;

        $r0 := @this: com.fasterxml.jackson.databind.type.TypeParser;

        $r1 := @parameter0: com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: com.fasterxml.jackson.databind.JavaType parseType(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer)>($r1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer: java.lang.String nextToken()>();

        $r5 = ">";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return $r2;

     label2:
        $r5 = ",";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected token \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', expected \',\' or \'>\')");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r1, $r4);

        throw $r7;

     label3:
        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.type.TypeParser: java.lang.IllegalArgumentException _problem(com.fasterxml.jackson.databind.type.TypeParser$MyTokenizer,java.lang.String)>($r1, "Unexpected end-of-string");

        throw $r7;
    }
}

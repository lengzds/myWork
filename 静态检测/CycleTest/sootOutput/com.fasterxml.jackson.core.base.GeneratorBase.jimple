public abstract class com.fasterxml.jackson.core.base.GeneratorBase extends com.fasterxml.jackson.core.JsonGenerator
{
    protected boolean _cfgNumbersAsStrings;
    protected boolean _closed;
    protected int _features;
    protected com.fasterxml.jackson.core.ObjectCodec _objectCodec;
    protected com.fasterxml.jackson.core.json.JsonWriteContext _writeContext;

    protected void <init>(int, com.fasterxml.jackson.core.ObjectCodec)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        int $i0;
        com.fasterxml.jackson.core.ObjectCodec $r1;
        com.fasterxml.jackson.core.json.JsonWriteContext $r2;
        com.fasterxml.jackson.core.JsonGenerator$Feature $r3;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.fasterxml.jackson.core.ObjectCodec;

        specialinvoke $r0.<com.fasterxml.jackson.core.JsonGenerator: void <init>()>();

        $r0.<com.fasterxml.jackson.core.base.GeneratorBase: int _features> = $i0;

        $r2 = staticinvoke <com.fasterxml.jackson.core.json.JsonWriteContext: com.fasterxml.jackson.core.json.JsonWriteContext createRootContext()>();

        $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext> = $r2;

        $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.ObjectCodec _objectCodec> = $r1;

        $r3 = <com.fasterxml.jackson.core.JsonGenerator$Feature: com.fasterxml.jackson.core.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)>($r3);

        $r0.<com.fasterxml.jackson.core.base.GeneratorBase: boolean _cfgNumbersAsStrings> = $z0;

        return;
    }

    protected void _cantHappen()
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: should never end up through this code path");

        throw $r1;
    }

    protected void _reportError(java.lang.String)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        java.lang.String $r1;
        com.fasterxml.jackson.core.JsonGenerationException $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = new com.fasterxml.jackson.core.JsonGenerationException;

        specialinvoke $r2.<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected abstract void _verifyValueWrite(java.lang.String);

    protected void _writeSimpleObject(java.lang.Object)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Number $r3;
        int $i0;
        long $l1;
        double $d0;
        float $f0;
        short $s2;
        byte $b3;
        java.math.BigInteger $r4;
        java.math.BigDecimal $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        java.util.concurrent.atomic.AtomicLong $r7;
        byte[] $r8;
        java.lang.Boolean $r9;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        java.lang.IllegalStateException $r11;
        java.lang.StringBuilder $r12;
        java.lang.Class $r13;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label01;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNull()>();

        return;

     label01:
        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r2 = (java.lang.String) $r1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeString(java.lang.String)>($r2);

        return;

     label02:
        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label12;

        $r3 = (java.lang.Number) $r1;

        $z0 = $r3 instanceof java.lang.Integer;

        if $z0 == 0 goto label03;

        $i0 = virtualinvoke $r3.<java.lang.Number: int intValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(int)>($i0);

        return;

     label03:
        $z0 = $r3 instanceof java.lang.Long;

        if $z0 == 0 goto label04;

        $l1 = virtualinvoke $r3.<java.lang.Number: long longValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(long)>($l1);

        return;

     label04:
        $z0 = $r3 instanceof java.lang.Double;

        if $z0 == 0 goto label05;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(double)>($d0);

        return;

     label05:
        $z0 = $r3 instanceof java.lang.Float;

        if $z0 == 0 goto label06;

        $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(float)>($f0);

        return;

     label06:
        $z0 = $r3 instanceof java.lang.Short;

        if $z0 == 0 goto label07;

        $s2 = virtualinvoke $r3.<java.lang.Number: short shortValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(int)>($s2);

        return;

     label07:
        $z0 = $r3 instanceof java.lang.Byte;

        if $z0 == 0 goto label08;

        $b3 = virtualinvoke $r3.<java.lang.Number: byte byteValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(int)>($b3);

        return;

     label08:
        $z0 = $r3 instanceof java.math.BigInteger;

        if $z0 == 0 goto label09;

        $r4 = (java.math.BigInteger) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(java.math.BigInteger)>($r4);

        return;

     label09:
        $z0 = $r3 instanceof java.math.BigDecimal;

        if $z0 == 0 goto label10;

        $r5 = (java.math.BigDecimal) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(java.math.BigDecimal)>($r5);

        return;

     label10:
        $z0 = $r3 instanceof java.util.concurrent.atomic.AtomicInteger;

        if $z0 == 0 goto label11;

        $r6 = (java.util.concurrent.atomic.AtomicInteger) $r3;

        $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(int)>($i0);

        return;

     label11:
        $z0 = $r3 instanceof java.util.concurrent.atomic.AtomicLong;

        if $z0 == 0 goto label15;

        $r7 = (java.util.concurrent.atomic.AtomicLong) $r3;

        $l1 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNumber(long)>($l1);

        return;

     label12:
        $z0 = $r1 instanceof byte[];

        if $z0 == 0 goto label13;

        $r8 = (byte[]) $r1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeBinary(byte[])>($r8);

        return;

     label13:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label14;

        $r9 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeBoolean(boolean)>($z0);

        return;

     label14:
        $z0 = $r1 instanceof java.util.concurrent.atomic.AtomicBoolean;

        if $z0 == 0 goto label15;

        $r10 = (java.util.concurrent.atomic.AtomicBoolean) $r1;

        $z0 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeBoolean(boolean)>($z0);

        return;

     label15:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");

        $r13 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r11;
    }

    public void close()
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r0.<com.fasterxml.jackson.core.base.GeneratorBase: boolean _closed> = 1;

        return;
    }

    public final com.fasterxml.jackson.core.json.JsonWriteContext getOutputContext()
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        com.fasterxml.jackson.core.json.JsonWriteContext r1;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        r1 = $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.json.JsonWriteContext _writeContext>;

        return r1;
    }

    public final boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        com.fasterxml.jackson.core.JsonGenerator$Feature $r1;
        int $i0, $i1;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator$Feature;

        $i1 = $r0.<com.fasterxml.jackson.core.base.GeneratorBase: int _features>;

        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator$Feature: int getMask()>();

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.core.util.DefaultPrettyPrinter $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r2 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter;

        specialinvoke $r2.<com.fasterxml.jackson.core.util.DefaultPrettyPrinter: void <init>()>();

        $r1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)>($r2);

        return $r1;
    }

    public void writeFieldName(com.fasterxml.jackson.core.SerializableString)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        com.fasterxml.jackson.core.SerializableString $r1;
        java.lang.String $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.SerializableString;

        $r2 = interfaceinvoke $r1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeFieldName(java.lang.String)>($r2);

        return;
    }

    public void writeObject(java.lang.Object)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.ObjectCodec $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeNull()>();

        return;

     label1:
        $r2 = $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;

        if $r2 == null goto label2;

        $r2 = $r0.<com.fasterxml.jackson.core.base.GeneratorBase: com.fasterxml.jackson.core.ObjectCodec _objectCodec>;

        virtualinvoke $r2.<com.fasterxml.jackson.core.ObjectCodec: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>($r0, $r1);

        return;

     label2:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void _writeSimpleObject(java.lang.Object)>($r1);

        return;
    }

    public void writeRawValue(java.lang.String)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        java.lang.String $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void _verifyValueWrite(java.lang.String)>("write raw value");

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeRaw(java.lang.String)>($r1);

        return;
    }

    public void writeString(com.fasterxml.jackson.core.SerializableString)
    {
        com.fasterxml.jackson.core.base.GeneratorBase $r0;
        com.fasterxml.jackson.core.SerializableString $r1;
        java.lang.String $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.GeneratorBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.SerializableString;

        $r2 = interfaceinvoke $r1.<com.fasterxml.jackson.core.SerializableString: java.lang.String getValue()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.GeneratorBase: void writeString(java.lang.String)>($r2);

        return;
    }
}

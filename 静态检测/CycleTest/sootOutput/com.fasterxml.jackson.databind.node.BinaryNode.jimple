public final class com.fasterxml.jackson.databind.node.BinaryNode extends com.fasterxml.jackson.databind.node.ValueNode
{
    static final com.fasterxml.jackson.databind.node.BinaryNode EMPTY_BINARY_NODE;
    final byte[] _data;

    static void <clinit>()
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        byte[] $r1;

        $r0 = new com.fasterxml.jackson.databind.node.BinaryNode;

        $r1 = newarray (byte)[0];

        specialinvoke $r0.<com.fasterxml.jackson.databind.node.BinaryNode: void <init>(byte[])>($r1);

        <com.fasterxml.jackson.databind.node.BinaryNode: com.fasterxml.jackson.databind.node.BinaryNode EMPTY_BINARY_NODE> = $r0;

        return;
    }

    public void <init>(byte[])
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        byte[] $r1;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r1 := @parameter0: byte[];

        specialinvoke $r0.<com.fasterxml.jackson.databind.node.ValueNode: void <init>()>();

        $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data> = $r1;

        return;
    }

    public static com.fasterxml.jackson.databind.node.BinaryNode valueOf(byte[])
    {
        byte[] $r0;
        int $i0;
        com.fasterxml.jackson.databind.node.BinaryNode $r1;

        $r0 := @parameter0: byte[];

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

        $r1 = <com.fasterxml.jackson.databind.node.BinaryNode: com.fasterxml.jackson.databind.node.BinaryNode EMPTY_BINARY_NODE>;

        return $r1;

     label2:
        $r1 = new com.fasterxml.jackson.databind.node.BinaryNode;

        specialinvoke $r1.<com.fasterxml.jackson.databind.node.BinaryNode: void <init>(byte[])>($r0);

        return $r1;
    }

    public final java.lang.String asText()
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        byte[] $r1;
        com.fasterxml.jackson.core.Base64Variant $r2;
        java.lang.String $r3;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r2 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $r1 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>($r1, 0);

        return $r3;
    }

    public final boolean equals(java.lang.Object)
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0, $r4;
        java.lang.Object $r1;
        java.lang.Class $r2, $r3;
        byte[] $r5, $r6;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $r4 = (com.fasterxml.jackson.databind.node.BinaryNode) $r1;

        $r5 = $r4.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        $r6 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r6);

        return $z0;

     label2:
        return 0;
    }

    public final int hashCode()
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r1 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r1 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final void serialize(com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        byte[] $r3;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter1: com.fasterxml.jackson.databind.SerializerProvider;

        $r3 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r3);

        return;
    }

    public final java.lang.String toString()
    {
        com.fasterxml.jackson.databind.node.BinaryNode $r0;
        byte[] $r1;
        com.fasterxml.jackson.core.Base64Variant $r2;
        java.lang.String $r3;

        $r0 := @this: com.fasterxml.jackson.databind.node.BinaryNode;

        $r2 = staticinvoke <com.fasterxml.jackson.core.Base64Variants: com.fasterxml.jackson.core.Base64Variant getDefaultVariant()>();

        $r1 = $r0.<com.fasterxml.jackson.databind.node.BinaryNode: byte[] _data>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.Base64Variant: java.lang.String encode(byte[],boolean)>($r1, 1);

        return $r3;
    }
}

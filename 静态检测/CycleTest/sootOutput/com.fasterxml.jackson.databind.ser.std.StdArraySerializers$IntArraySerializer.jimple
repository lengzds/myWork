public final class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer extends com.fasterxml.jackson.databind.ser.std.ArraySerializerBase
{
    private static final com.fasterxml.jackson.databind.JavaType VALUE_TYPE;

    static void <clinit>()
    {
        java.lang.Class $r0;
        com.fasterxml.jackson.databind.type.TypeFactory $r1;
        com.fasterxml.jackson.databind.JavaType $r2;

        $r1 = staticinvoke <com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.TypeFactory defaultInstance()>();

        $r0 = <java.lang.Integer: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class)>($r0);

        <com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: com.fasterxml.jackson.databind.JavaType VALUE_TYPE> = $r2;

        return;
    }

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void <init>(java.lang.Class,com.fasterxml.jackson.databind.BeanProperty)>(class "[I", null);

        return;
    }

    public final com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        return $r0;
    }

    public final volatile boolean hasSingleElement(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        int[] $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (int[]) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: boolean hasSingleElement(int[])>($r2);

        return $z0;
    }

    public final boolean hasSingleElement(int[])
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: int[];

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final volatile boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        int[] $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (int[]) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: boolean isEmpty(int[])>($r2);

        return $z0;
    }

    public final boolean isEmpty(int[])
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: int[];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final volatile void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        java.lang.Object $r3;
        int[] $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (int[]) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void serializeContents(int[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public final void serializeContents(int[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r0;
        int[] $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        int $i0, $i1, $i2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $i2 = 0;

        $i0 = lengthof $r1;

     label1:
        if $i2 >= $i0 goto label2;

        $i1 = $r1[$i2];

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(int)>($i1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }
}

public class com.fasterxml.jackson.databind.ser.std.ToStringSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer
{
    public static final com.fasterxml.jackson.databind.ser.std.ToStringSerializer instance;

    static void <clinit>()
    {
        com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r0;

        $r0 = new com.fasterxml.jackson.databind.ser.std.ToStringSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: void <init>()>();

        <com.fasterxml.jackson.databind.ser.std.ToStringSerializer: com.fasterxml.jackson.databind.ser.std.ToStringSerializer instance> = $r0;

        return;
    }

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "java/lang/Object");

        return;
    }

    public boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r0;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        java.lang.String $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeString(java.lang.String)>($r4);

        return;
    }

    public void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.ToStringSerializer $r0;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ToStringSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ToStringSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        return;
    }
}

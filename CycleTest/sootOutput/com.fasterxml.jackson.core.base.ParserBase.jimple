public abstract class com.fasterxml.jackson.core.base.ParserBase extends com.fasterxml.jackson.core.base.ParserMinimalBase
{
    static final java.math.BigDecimal BD_MAX_INT;
    static final java.math.BigDecimal BD_MAX_LONG;
    static final java.math.BigDecimal BD_MIN_INT;
    static final java.math.BigDecimal BD_MIN_LONG;
    protected byte[] _binaryValue;
    protected com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder;
    protected boolean _closed;
    protected long _currInputProcessed;
    protected int _currInputRow;
    protected int _currInputRowStart;
    protected int _expLength;
    protected int _fractLength;
    protected int _inputEnd;
    protected int _inputPtr;
    protected int _intLength;
    protected final com.fasterxml.jackson.core.io.IOContext _ioContext;
    protected boolean _nameCopied;
    protected char[] _nameCopyBuffer;
    protected com.fasterxml.jackson.core.JsonToken _nextToken;
    protected int _numTypesValid;
    protected java.math.BigDecimal _numberBigDecimal;
    protected java.math.BigInteger _numberBigInt;
    protected double _numberDouble;
    protected int _numberInt;
    protected long _numberLong;
    protected boolean _numberNegative;
    protected com.fasterxml.jackson.core.json.JsonReadContext _parsingContext;
    protected final com.fasterxml.jackson.core.util.TextBuffer _textBuffer;
    protected int _tokenInputCol;
    protected int _tokenInputRow;
    protected long _tokenInputTotal;

    static void <clinit>()
    {
        java.math.BigDecimal $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long)>(-9223372036854775808L);

        <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_LONG> = $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long)>(9223372036854775807L);

        <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_LONG> = $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long)>(-9223372036854775808L);

        <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_INT> = $r0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long)>(9223372036854775807L);

        <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_INT> = $r0;

        return;
    }

    protected void <init>(com.fasterxml.jackson.core.io.IOContext, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.io.IOContext $r1;
        int $i0;
        com.fasterxml.jackson.core.util.TextBuffer $r2;
        com.fasterxml.jackson.core.json.JsonReadContext $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.io.IOContext;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void <init>()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _inputPtr> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _inputEnd> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _currInputProcessed> = 0L;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _currInputRow> = 1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _currInputRowStart> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _tokenInputTotal> = 0L;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _tokenInputRow> = 1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _tokenInputCol> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: char[] _nameCopyBuffer> = null;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _nameCopied> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder> = null;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _features> = $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext> = $r1;

        $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.io.IOContext: com.fasterxml.jackson.core.util.TextBuffer constructTextBuffer()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer> = $r2;

        $r3 = staticinvoke <com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext createRootContext()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext> = $r3;

        return;
    }

    private final void _parseSlowFloatValue(int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        com.fasterxml.jackson.core.util.TextBuffer $r1;
        java.math.BigDecimal $r2;
        double $d0;
        java.lang.NumberFormatException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 := @parameter0: int;

        if $i0 != 16 goto label3;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

     label1:
        $r2 = virtualinvoke $r1.<com.fasterxml.jackson.core.util.TextBuffer: java.math.BigDecimal contentsAsDecimal()>();

     label2:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r2;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 16;

        return;

     label3:
        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

     label4:
        $d0 = virtualinvoke $r1.<com.fasterxml.jackson.core.util.TextBuffer: double contentsAsDouble()>();

     label5:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 8;

        return;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed numeric value \'");

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _wrapError(java.lang.String,java.lang.Throwable)>($r5, $r3);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label6;
        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private final void _parseSlowIntValue(int, char[], int, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0, $i1, $i2;
        char[] $r1;
        com.fasterxml.jackson.core.util.TextBuffer $r2;
        java.lang.String $r3;
        boolean $z0;
        long $l3;
        java.math.BigInteger $r4;
        java.lang.NumberFormatException $r5;
        java.lang.StringBuilder $r6;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: char[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: java.lang.String contentsAsString()>();

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

     label1:
        $z0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: boolean inLongRange(char[],int,int,boolean)>($r1, $i1, $i2, $z0);

     label2:
        if $z0 == 0 goto label5;

     label3:
        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3);

     label4:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l3;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 2;

        return;

     label5:
        $r4 = new java.math.BigInteger;

     label6:
        specialinvoke $r4.<java.math.BigInteger: void <init>(java.lang.String)>($r3);

     label7:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r4;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 4;

        return;

     label8:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Malformed numeric value \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _wrapError(java.lang.String,java.lang.Throwable)>($r3, $r5);

        return;

        catch java.lang.NumberFormatException from label1 to label2 with label8;
        catch java.lang.NumberFormatException from label3 to label4 with label8;
        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    protected abstract void _closeInput();

    protected final int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant, char, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.Base64Variant $r1;
        char $c0;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        if $c0 == 92 goto label1;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)>($r1, $c0, $i1);

        throw $r2;

     label1:
        $c0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: char _decodeEscaped()>();

        if $c0 > 32 goto label2;

        if $i1 != 0 goto label2;

        return -1;

     label2:
        $i2 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>($c0);

        if $i2 >= 0 goto label3;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)>($r1, $c0, $i1);

        throw $r2;

     label3:
        return $i2;
    }

    protected final int _decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant, int, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.Base64Variant $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        char $c2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 == 92 goto label1;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)>($r1, $i0, $i1);

        throw $r2;

     label1:
        $c2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: char _decodeEscaped()>();

        if $c2 > 32 goto label2;

        if $i1 != 0 goto label2;

        return -1;

     label2:
        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(int)>($c2);

        if $i0 >= 0 goto label3;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)>($r1, $c2, $i1);

        throw $r2;

     label3:
        return $i0;
    }

    protected char _decodeEscaped()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public com.fasterxml.jackson.core.util.ByteArrayBuilder _getByteArrayBuilder()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.util.ByteArrayBuilder $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        if $r1 != null goto label2;

        $r1 = new com.fasterxml.jackson.core.util.ByteArrayBuilder;

        specialinvoke $r1.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder> = $r1;

     label1:
        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        return $r1;

     label2:
        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.ByteArrayBuilder _byteArrayBuilder>;

        virtualinvoke $r1.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void reset()>();

        goto label1;
    }

    protected void _handleEOF()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.json.JsonReadContext $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        com.fasterxml.jackson.core.io.IOContext $r4;
        java.lang.Object $r5;
        com.fasterxml.jackson.core.JsonLocation $r6;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.core.json.JsonReadContext: boolean inRoot()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(": expected close marker for ");

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getTypeDesc()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from ");

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r4 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r5 = virtualinvoke $r4.<com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>();

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportInvalidEOF(java.lang.String)>($r3);

     label1:
        return;
    }

    protected void _parseNumericValue(int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0, $i1, $i2, $i3;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;
        com.fasterxml.jackson.core.util.TextBuffer $r3;
        char[] $r4;
        boolean $z0;
        long $l4, $l5;
        byte $b6;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r1 != $r2 goto label8;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.core.util.TextBuffer: char[] getTextBuffer()>();

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r3.<com.fasterxml.jackson.core.util.TextBuffer: int getTextOffset()>();

        $i2 = $i1;

        $i3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _intLength>;

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label1;

        $i2 = $i1 + 1;

     label1:
        if $i3 > 9 goto label3;

        $i0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(char[],int,int)>($r4, $i2, $i3);

        $i1 = $i0;

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label2;

        $i1 = neg $i0;

     label2:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label3:
        if $i3 > 18 goto label7;

        $l4 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(char[],int,int)>($r4, $i2, $i3);

        $l5 = $l4;

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label4;

        $l5 = neg $l4;

     label4:
        if $i3 != 10 goto label6;

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label5;

        $b6 = $l5 cmp -2147483648L;

        if $b6 < 0 goto label6;

        $i0 = (int) $l5;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label5:
        $b6 = $l5 cmp 2147483647L;

        if $b6 > 0 goto label6;

        $i0 = (int) $l5;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 1;

        return;

     label6:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l5;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 2;

        return;

     label7:
        specialinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseSlowIntValue(int,char[],int,int)>($i0, $r4, $i2, $i3);

        return;

     label8:
        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r1 != $r2 goto label9;

        specialinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseSlowFloatValue(int)>($i0);

        return;

     label9:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Current token (");

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r6);

        return;
    }

    protected void _releaseBuffers()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.util.TextBuffer $r1;
        char[] $r2;
        com.fasterxml.jackson.core.io.IOContext $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r1.<com.fasterxml.jackson.core.util.TextBuffer: void releaseBuffers()>();

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: char[] _nameCopyBuffer>;

        if $r2 == null goto label1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: char[] _nameCopyBuffer> = null;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;

        virtualinvoke $r3.<com.fasterxml.jackson.core.io.IOContext: void releaseNameCopyBuffer(char[])>($r2);

     label1:
        return;
    }

    protected void _reportMismatchedEndMarker(int, char)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        char $c1, $c2;
        java.lang.StringBuilder $r1;
        com.fasterxml.jackson.core.json.JsonReadContext $r2;
        com.fasterxml.jackson.core.io.IOContext $r3;
        java.lang.Object $r4;
        com.fasterxml.jackson.core.JsonLocation $r5;
        java.lang.String $r6, $r7;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 := @parameter0: int;

        $c1 := @parameter1: char;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>();

        $r5 = virtualinvoke $r2.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.JsonLocation getStartLocation(java.lang.Object)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected close marker \'");

        $c2 = (char) $i0;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': expected \'");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (for ");

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r7 = virtualinvoke $r2.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getTypeDesc()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starting at ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r6);

        return;
    }

    public void close()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _closed>;

        if $z0 != 0 goto label4;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _closed> = 1;

     label1:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _closeInput()>();

     label2:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        return;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _releaseBuffers()>();

        throw $r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void convertNumberToBigDecimal()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.math.BigDecimal $r1;
        java.lang.String $r2;
        java.math.BigInteger $r3;
        long $l1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 == 0 goto label2;

        $r1 = new java.math.BigDecimal;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.lang.String)>($r2);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 | 16;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i0;

        return;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r1 = new java.math.BigDecimal;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r3);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

        goto label1;

     label3:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label4;

        $l1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

        goto label1;

     label4:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label5;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l1 = (long) $i0;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l1);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

        goto label1;

     label5:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

        goto label1;
    }

    protected void convertNumberToBigInteger()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.math.BigDecimal $r1;
        java.math.BigInteger $r2;
        long $l1;
        double $d0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label2;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r2;

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 | 4;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i0;

        return;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label3;

        $l1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r2;

        goto label1;

     label3:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label4;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l1 = (long) $i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l1);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r2;

        goto label1;

     label4:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 == 0 goto label5;

        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt> = $r2;

        goto label1;

     label5:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

        goto label1;
    }

    protected void convertNumberToDouble()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.math.BigDecimal $r1;
        double $d0;
        java.math.BigInteger $r2;
        long $l1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label2;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $d0 = virtualinvoke $r1.<java.math.BigDecimal: double doubleValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 | 8;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i0;

        return;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $d0 = virtualinvoke $r2.<java.math.BigInteger: double doubleValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        goto label1;

     label3:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label4;

        $l1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $d0 = (double) $l1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        goto label1;

     label4:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label5;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $d0 = (double) $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        goto label1;

     label5:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

        goto label1;
    }

    protected void convertNumberToInt()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        long $l0, $l2;
        int $i1;
        byte $b3;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.math.BigInteger $r3;
        double $d0;
        java.math.BigDecimal $r4, $r5;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label03;

        $l0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $i1 = (int) $l0;

        $l2 = (long) $i1;

        $l0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $b3 = $l2 cmp $l0;

        if $b3 == 0 goto label01;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Numeric value (");

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r2);

     label01:
        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i1;

     label02:
        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i1 | 1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i1;

        return;

     label03:
        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label04;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $i1 = virtualinvoke $r3.<java.math.BigInteger: int intValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i1;

        goto label02;

     label04:
        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i1 & 8;

        if $i1 == 0 goto label07;

        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b3 = $d0 cmpg -2.147483648E9;

        if $b3 < 0 goto label05;

        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b3 = $d0 cmpl 2.147483647E9;

        if $b3 <= 0 goto label06;

     label05:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>();

     label06:
        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $i1 = (int) $d0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i1;

        goto label02;

     label07:
        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i1 = $i1 & 16;

        if $i1 == 0 goto label10;

        $r4 = <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_INT>;

        $r5 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i1 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r5);

        if $i1 > 0 goto label08;

        $r4 = <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_INT>;

        $r5 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i1 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r5);

        if $i1 >= 0 goto label09;

     label08:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowInt()>();

     label09:
        $r4 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i1 = virtualinvoke $r4.<java.math.BigDecimal: int intValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt> = $i1;

        goto label02;

     label10:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

        goto label02;
    }

    protected void convertNumberToLong()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        long $l1;
        java.math.BigInteger $r1;
        double $d0;
        byte $b2;
        java.math.BigDecimal $r2, $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $l1 = (long) $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l1;

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 | 2;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = $i0;

        return;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label3;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        $l1 = virtualinvoke $r1.<java.math.BigInteger: long longValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l1;

        goto label1;

     label3:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 == 0 goto label6;

        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b2 = $d0 cmpg -9.223372036854776E18;

        if $b2 < 0 goto label4;

        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $b2 = $d0 cmpl 9.223372036854776E18;

        if $b2 <= 0 goto label5;

     label4:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>();

     label5:
        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $l1 = (long) $d0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l1;

        goto label1;

     label6:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label9;

        $r2 = <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MIN_LONG>;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i0 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i0 > 0 goto label7;

        $r2 = <com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal BD_MAX_LONG>;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i0 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i0 >= 0 goto label8;

     label7:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void reportOverflowLong()>();

     label8:
        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        $l1 = virtualinvoke $r2.<java.math.BigDecimal: long longValue()>();

        $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong> = $l1;

        goto label1;

     label9:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

        goto label1;
    }

    public java.math.BigInteger getBigIntegerValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.math.BigInteger r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 != 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(4);

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigInteger()>();

     label2:
        r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        return r1;
    }

    public com.fasterxml.jackson.core.JsonLocation getCurrentLocation()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.JsonLocation $r2;
        com.fasterxml.jackson.core.io.IOContext $r3;
        long $l2, $l3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _inputPtr>;

        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _currInputRowStart>;

        $i0 = $i0 - $i1;

        $i0 = $i0 + 1;

        $r2 = new com.fasterxml.jackson.core.JsonLocation;

        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r1 = virtualinvoke $r3.<com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>();

        $l2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _currInputProcessed>;

        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _inputPtr>;

        $l3 = (long) $i1;

        $l2 = $l2 + $l3;

        $l2 = $l2 - 1L;

        $i1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _currInputRow>;

        specialinvoke $r2.<com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,int,int)>($r1, $l2, $i1, $i0);

        return $r2;
    }

    public java.lang.String getCurrentName()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;
        com.fasterxml.jackson.core.json.JsonReadContext $r3;
        java.lang.String $r4;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r1 == $r2 goto label1;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r1 != $r2 goto label2;

     label1:
        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r3 = virtualinvoke $r3.<com.fasterxml.jackson.core.json.JsonReadContext: com.fasterxml.jackson.core.json.JsonReadContext getParent()>();

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r4;

     label2:
        $r3 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.json.JsonReadContext _parsingContext>;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.core.json.JsonReadContext: java.lang.String getCurrentName()>();

        return $r4;
    }

    public java.math.BigDecimal getDecimalValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.math.BigDecimal r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 != 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(16);

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToBigDecimal()>();

     label2:
        r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return r1;
    }

    public double getDoubleValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        double d0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 != 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(8);

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToDouble()>();

     label2:
        d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        return d0;
    }

    public float getFloatValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        double $d0;
        float $f0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $d0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: double getDoubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public int getIntValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 != 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(1);

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToInt()>();

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        return $i0;
    }

    public long getLongValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        long l1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 != 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(2);

     label1:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void convertNumberToLong()>();

     label2:
        l1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        return l1;
    }

    public com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0;
        com.fasterxml.jackson.core.JsonParser$NumberType r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(0);

     label1:
        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label4;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        r3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        return r3;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label3;

        r3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        return r3;

     label3:
        r3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_INTEGER>;

        return r3;

     label4:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label5;

        r3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType BIG_DECIMAL>;

        return r3;

     label5:
        r3 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType DOUBLE>;

        return r3;
    }

    public java.lang.Number getNumberValue()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;
        int $i0;
        java.lang.Integer $r3;
        long $l1;
        java.lang.Long $r4;
        double $d0;
        java.lang.Double $r5;
        java.math.BigInteger r6;
        java.math.BigDecimal r7;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _parseNumericValue(int)>(0);

     label1:
        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label5;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 1;

        if $i0 == 0 goto label2;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numberInt>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r3;

     label2:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label3;

        $l1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _numberLong>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r4;

     label3:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label4;

        r6 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigInteger _numberBigInt>;

        return r6;

     label4:
        r7 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return r7;

     label5:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 16;

        if $i0 == 0 goto label6;

        r7 = $r0.<com.fasterxml.jackson.core.base.ParserBase: java.math.BigDecimal _numberBigDecimal>;

        return r7;

     label6:
        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid>;

        $i0 = $i0 & 8;

        if $i0 != 0 goto label7;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _throwInternal()>();

     label7:
        $d0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;
    }

    public final long getTokenCharacterOffset()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        long l0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        l0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: long _tokenInputTotal>;

        return l0;
    }

    public final int getTokenColumnNr()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _tokenInputCol>;

        if $i0 >= 0 goto label1;

        return $i0;

     label1:
        $i0 = $i0 + 1;

        return $i0;
    }

    public final int getTokenLineNr()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int i0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        i0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: int _tokenInputRow>;

        return i0;
    }

    public com.fasterxml.jackson.core.JsonLocation getTokenLocation()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.JsonLocation $r1;
        com.fasterxml.jackson.core.io.IOContext $r2;
        java.lang.Object $r3;
        long $l0;
        int $i1, $i2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new com.fasterxml.jackson.core.JsonLocation;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.io.IOContext _ioContext>;

        $r3 = virtualinvoke $r2.<com.fasterxml.jackson.core.io.IOContext: java.lang.Object getSourceReference()>();

        $l0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: long getTokenCharacterOffset()>();

        $i1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: int getTokenLineNr()>();

        $i2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: int getTokenColumnNr()>();

        specialinvoke $r1.<com.fasterxml.jackson.core.JsonLocation: void <init>(java.lang.Object,long,int,int)>($r3, $l0, $i1, $i2);

        return $r1;
    }

    public boolean hasTextCharacters()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;
        boolean z0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r2 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r1 != $r2 goto label2;

        z0 = $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _nameCopied>;

        return z0;

     label2:
        return 0;
    }

    protected abstract boolean loadMore();

    protected final void loadMoreGuaranteed()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean loadMore()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportInvalidEOF()>();

     label1:
        return;
    }

    protected java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant, int, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.Base64Variant $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)>($r1, $i0, $i1, null);

        return $r2;
    }

    protected java.lang.IllegalArgumentException reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant, int, int, java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        com.fasterxml.jackson.core.Base64Variant $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        char $c2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        if $i0 > 32 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal white space character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i0 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        return $r5;

     label3:
        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(int)>($i0);

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected padding character (\'");

        $c2 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i0 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(int)>($i0);

        if $z0 == 0 goto label5;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(int)>($i0);

        if $z0 == 0 goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal character \'");

        $c2 = (char) $i0;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    protected void reportInvalidNumber(java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid numeric value: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r1);

        return;
    }

    protected void reportOverflowInt()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Numeric value (");

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int (-2147483648 - 2147483647)");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r2);

        return;
    }

    protected void reportOverflowLong()
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Numeric value (");

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: java.lang.String getText()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of long (-9223372036854775808 - 9223372036854775807)");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r2);

        return;
    }

    protected void reportUnexpectedNumberChar(int, java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        int $i0;
        java.lang.String $r1, $r3, $r4;
        java.lang.StringBuilder $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected character (");

        $r3 = staticinvoke <com.fasterxml.jackson.core.base.ParserBase: java.lang.String _getCharDesc(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in numeric value");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r3;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: void _reportError(java.lang.String)>($r4);

        return;
    }

    protected final com.fasterxml.jackson.core.JsonToken reset(boolean, int, int, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        com.fasterxml.jackson.core.JsonToken $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i1 > 0 goto label1;

        if $i2 > 0 goto label1;

        $r1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken resetInt(boolean,int)>($z0, $i0);

        return $r1;

     label1:
        $r1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.JsonToken resetFloat(boolean,int,int,int)>($z0, $i0, $i1, $i2);

        return $r1;
    }

    protected final com.fasterxml.jackson.core.JsonToken resetAsNaN(java.lang.String, double)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        java.lang.String $r1;
        double $d0;
        com.fasterxml.jackson.core.util.TextBuffer $r2;
        com.fasterxml.jackson.core.JsonToken r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserBase: com.fasterxml.jackson.core.util.TextBuffer _textBuffer>;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.TextBuffer: void resetWithString(java.lang.String)>($r1);

        $r0.<com.fasterxml.jackson.core.base.ParserBase: double _numberDouble> = $d0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 8;

        r3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        return r3;
    }

    protected final com.fasterxml.jackson.core.JsonToken resetFloat(boolean, int, int, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        com.fasterxml.jackson.core.JsonToken r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative> = $z0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _intLength> = $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _fractLength> = $i1;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _expLength> = $i2;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        r1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        return r1;
    }

    protected final com.fasterxml.jackson.core.JsonToken resetInt(boolean, int)
    {
        com.fasterxml.jackson.core.base.ParserBase $r0;
        boolean $z0;
        int $i0;
        com.fasterxml.jackson.core.JsonToken r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserBase;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: boolean _numberNegative> = $z0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _intLength> = $i0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _fractLength> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _expLength> = 0;

        $r0.<com.fasterxml.jackson.core.base.ParserBase: int _numTypesValid> = 0;

        r1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        return r1;
    }
}

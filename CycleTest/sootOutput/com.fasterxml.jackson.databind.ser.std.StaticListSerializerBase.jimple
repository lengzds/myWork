public abstract class com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdSerializer
{

    protected void <init>(java.lang.Class)
    {
        com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase $r0;
        java.lang.Class $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class,boolean)>($r1, 0);

        return;
    }

    public volatile boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.Collection $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase: boolean isEmpty(java.util.Collection)>($r2);

        return $z0;
    }

    public boolean isEmpty(java.util.Collection)
    {
        com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase $r0;
        java.util.Collection $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StaticListSerializerBase;

        $r1 := @parameter0: java.util.Collection;

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}

final class com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser extends com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$Base
{

    public void <init>()
    {
        com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser $r0;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        specialinvoke $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$Base: void <init>(java.lang.Class)>(class "[F");

        return;
    }

    private final float[] handleNonArray(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        com.fasterxml.jackson.databind.DeserializationFeature $r5;
        boolean $z0;
        java.lang.String $r6;
        int $i0;
        java.lang.Class $r7;
        com.fasterxml.jackson.databind.JsonMappingException $r8;
        float[] $r9;
        float $f0;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label1;

        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT>;

        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>($r5);

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r5 = <com.fasterxml.jackson.databind.DeserializationFeature: com.fasterxml.jackson.databind.DeserializationFeature ACCEPT_SINGLE_VALUE_AS_ARRAY>;

        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: boolean isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)>($r5);

        if $z0 != 0 goto label2;

        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class)>($r7);

        throw $r8;

     label2:
        $r9 = newarray (float)[1];

        $f0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float _parseFloatPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        $r9[0] = $f0;

        return $r9;
    }

    public final volatile java.lang.Object deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        float[] $r3;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        return $r3;
    }

    public final float[] deserialize(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        boolean $z0;
        float[] $r3;
        com.fasterxml.jackson.databind.util.ArrayBuilders $r4;
        com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder $r5;
        java.lang.Object $r6;
        int $i0, $i1;
        com.fasterxml.jackson.core.JsonToken $r7, $r8;
        float $f0;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: boolean isExpectedStartArrayToken()>();

        if $z0 != 0 goto label1;

        $r3 = specialinvoke $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float[] handleNonArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        return $r3;

     label1:
        $r4 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.util.ArrayBuilders getArrayBuilders()>();

        $r5 = virtualinvoke $r4.<com.fasterxml.jackson.databind.util.ArrayBuilders: com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder getFloatBuilder()>();

        $r6 = virtualinvoke $r5.<com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object resetAndStart()>();

        $r3 = (float[]) $r6;

        $i0 = 0;

     label2:
        $r7 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r8 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken END_ARRAY>;

        if $r7 == $r8 goto label4;

        $f0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.PrimitiveArrayDeserializers$FloatDeser: float _parseFloatPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        $i1 = lengthof $r3;

        if $i0 < $i1 goto label5;

        $r6 = virtualinvoke $r5.<com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object appendCompletedChunk(java.lang.Object,int)>($r3, $i0);

        $i1 = 0;

        $r3 = (float[]) $r6;

     label3:
        $i0 = $i1 + 1;

        $r3[$i1] = $f0;

        goto label2;

     label4:
        $r6 = virtualinvoke $r5.<com.fasterxml.jackson.databind.util.ArrayBuilders$FloatBuilder: java.lang.Object completeAndClearBuffer(java.lang.Object,int)>($r3, $i0);

        $r3 = (float[]) $r6;

        return $r3;

     label5:
        $i1 = $i0;

        goto label3;
    }
}

public final class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer
{
    private static final com.fasterxml.jackson.databind.JavaType VALUE_TYPE;

    static void <clinit>()
    {
        java.lang.Class $r0;
        com.fasterxml.jackson.databind.type.TypeFactory $r1;
        com.fasterxml.jackson.databind.JavaType $r2;

        $r1 = staticinvoke <com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.type.TypeFactory defaultInstance()>();

        $r0 = <java.lang.Float: java.lang.Class TYPE>;

        $r2 = virtualinvoke $r1.<com.fasterxml.jackson.databind.type.TypeFactory: com.fasterxml.jackson.databind.JavaType uncheckedSimpleType(java.lang.Class)>($r0);

        <com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.JavaType VALUE_TYPE> = $r2;

        return;
    }

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(java.lang.Class)>(class "[F");

        return;
    }

    public void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0, $r1;
        com.fasterxml.jackson.databind.BeanProperty $r2;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r3;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        $r3 := @parameter2: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$TypedPrimitiveArraySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r1, $r2, $r3);

        return;
    }

    public final com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0, $r2;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r1;
        com.fasterxml.jackson.databind.BeanProperty $r3;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r2 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r3 = $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void <init>(com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r0, $r3, $r1);

        return $r2;
    }

    public final volatile boolean hasSingleElement(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        float[] $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (float[]) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: boolean hasSingleElement(float[])>($r2);

        return $z0;
    }

    public final boolean hasSingleElement(float[])
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        float[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: float[];

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final volatile boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        float[] $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (float[]) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: boolean isEmpty(float[])>($r2);

        return $z0;
    }

    public final boolean isEmpty(float[])
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        float[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: float[];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final volatile void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        java.lang.Object $r3;
        float[] $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (float[]) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void serializeContents(float[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public final void serializeContents(float[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r0;
        float[] $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        java.lang.Class $r4;
        int $i0, $i1;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r5;
        float $f0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        $r1 := @parameter0: float[];

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $i0 = 0;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        if $r5 == null goto label2;

        $i1 = lengthof $r1;

     label1:
        if $i0 >= $i1 goto label4;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        $r4 = <java.lang.Float: java.lang.Class TYPE>;

        virtualinvoke $r5.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,java.lang.Class)>(null, $r2, $r4);

        $f0 = $r1[$i0];

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0);

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        virtualinvoke $r5.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>(null, $r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i1 = lengthof $r1;

     label3:
        if $i0 >= $i1 goto label4;

        $f0 = $r1[$i0];

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeNumber(float)>($f0);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
}

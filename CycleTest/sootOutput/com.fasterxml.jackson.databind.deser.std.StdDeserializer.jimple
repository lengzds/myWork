public abstract class com.fasterxml.jackson.databind.deser.std.StdDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer
{
    protected final java.lang.Class _valueClass;

    protected void <init>(com.fasterxml.jackson.databind.JavaType)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        java.lang.Class $r2;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        specialinvoke $r0.<com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>();

        if $r1 != null goto label2;

        $r2 = null;

     label1:
        $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass> = $r2;

        return;

     label2:
        $r2 = virtualinvoke $r1.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        goto label1;
    }

    protected void <init>(java.lang.Class)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        java.lang.Class $r1;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<com.fasterxml.jackson.databind.JsonDeserializer: void <init>()>();

        $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass> = $r1;

        return;
    }

    protected static final double parseDouble(java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        double $d0;

        $r0 := @parameter0: java.lang.String;

        $r1 = "2.2250738585072012e-308";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label1;

        return 2.2250738585072014E-308;

     label1:
        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r0);

        return $d0;
    }

    protected final java.lang.Boolean _parseBoolean(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        com.fasterxml.jackson.core.JsonParser$NumberType $r5, $r6;
        int $i0;
        boolean $z0;
        java.lang.Boolean $r7;
        java.lang.Object $r8;
        java.lang.String $r9, $r10;
        java.lang.Class $r11;
        com.fasterxml.jackson.databind.JsonMappingException $r12;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if $r3 != $r4 goto label01;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r7;

     label01:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if $r3 != $r4 goto label02;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r7;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label05;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r6 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if $r5 != $r6 goto label04;

        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        if $i0 != 0 goto label03;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r7;

     label03:
        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r7;

     label04:
        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _parseBooleanFromNumber(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r7;

     label05:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label06;

        $r8 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r7 = (java.lang.Boolean) $r8;

        return $r7;

     label06:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label10;

        $r9 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

        $r10 = "true";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label07;

        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r7;

     label07:
        $r10 = "false";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label08;

        $r7 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r7;

     label08:
        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label09;

        $r8 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r7 = (java.lang.Boolean) $r8;

        return $r7;

     label09:
        $r11 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r12 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r11, "only \"true\" or \"false\" recognized");

        throw $r12;

     label10:
        $r11 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r12 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r11, $r3);

        throw $r12;
    }

    protected final boolean _parseBooleanFromNumber(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonParser$NumberType $r3, $r4;
        long $l0;
        byte $b1;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.String $r6, $r7;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r4 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType LONG>;

        if $r3 != $r4 goto label3;

        $l0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label1:
        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label2:
        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label1;

     label3:
        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r7 = "0.0";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label4;

        $r7 = "0";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

     label4:
        $r5 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label5:
        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected final boolean _parseBooleanPrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        com.fasterxml.jackson.core.JsonParser$NumberType $r5, $r6;
        int $i0;
        boolean $z0;
        java.lang.String $r7, $r8;
        java.lang.Boolean $r9;
        java.lang.Class $r10;
        com.fasterxml.jackson.databind.JsonMappingException $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_TRUE>;

        if $r3 != $r4 goto label1;

        return 1;

     label1:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_FALSE>;

        if $r3 != $r4 goto label2;

        return 0;

     label2:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label3;

        return 0;

     label3:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label5;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser$NumberType getNumberType()>();

        $r6 = <com.fasterxml.jackson.core.JsonParser$NumberType: com.fasterxml.jackson.core.JsonParser$NumberType INT>;

        if $r5 != $r6 goto label4;

        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        if $i0 != 0 goto label9;

        return 0;

     label4:
        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: boolean _parseBooleanFromNumber(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        return $z0;

     label5:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label8;

        $r7 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $r8 = "true";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label9;

        $r8 = "false";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label6;

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label7;

     label6:
        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label7:
        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r10, "only \"true\" or \"false\" recognized");

        throw $r11;

     label8:
        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r10, $r3);

        throw $r11;

     label9:
        return 1;
    }

    protected java.lang.Byte _parseByte(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        byte $b0;
        java.lang.Byte $r5;
        java.lang.String $r6;
        int $i1;
        java.lang.Object $r7;
        java.lang.Class $r8;
        com.fasterxml.jackson.databind.JsonMappingException $r9;
        java.lang.IllegalArgumentException $r10;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $b0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: byte getByteValue()>();

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

     label04:
        if $i1 != 0 goto label07;

     label05:
        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

     label06:
        $r5 = (java.lang.Byte) $r7;

        return $r5;

     label07:
        $i1 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>($r6);

     label08:
        if $i1 < -128 goto label09;

        if $i1 <= 255 goto label11;

     label09:
        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "overflow, value can not be represented as 8-bit value");

        throw $r9;

     label10:
        $r10 := @caughtexception;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid Byte value");

        throw $r9;

     label11:
        $b0 = (byte) $i1;

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r5;

     label12:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Byte) $r7;

        return $r5;

     label13:
        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r8, $r3);

        throw $r9;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label07 to label08 with label10;
    }

    protected java.util.Date _parseDate(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        java.util.Date $r5;
        long $l0;
        java.lang.Object $r6;
        java.lang.String $r7;
        int $i1;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class $r9;
        java.lang.StringBuilder $r10;
        com.fasterxml.jackson.databind.JsonMappingException $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 != $r4 goto label01;

        $r5 = new java.util.Date;

        $l0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        specialinvoke $r5.<java.util.Date: void <init>(long)>($l0);

        return $r5;

     label01:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label02;

        $r6 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.util.Date) $r6;

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label10;

     label03:
        $r7 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

     label04:
        if $i1 != 0 goto label07;

     label05:
        $r6 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

     label06:
        $r5 = (java.util.Date) $r6;

        return $r5;

     label07:
        $r5 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: java.util.Date parseDate(java.lang.String)>($r7);

     label08:
        return $r5;

     label09:
        $r8 := @caughtexception;

        $r9 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("not a valid representation (error: ");

        $r7 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r9, $r7);

        throw $r11;

     label10:
        $r9 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r9, $r3);

        throw $r11;

        catch java.lang.IllegalArgumentException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
    }

    protected final java.lang.Double _parseDouble(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        double $d0;
        java.lang.Double $r5;
        java.lang.String $r6, $r8;
        int $i0;
        java.lang.Object $r7;
        char $c1;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class $r10;
        com.fasterxml.jackson.databind.JsonMappingException $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $d0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r5 = (java.lang.Double) $r7;

        return $r5;

     label03:
        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $d0 = staticinvoke <com.fasterxml.jackson.databind.deser.std.StdDeserializer: double parseDouble(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

     label05:
        return $r5;

     label06:
        $r8 = "Infinity";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label07;

        $r8 = "INF";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label07:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#Infinity);

        return $r5;

     label08:
        $r8 = "NaN";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#NaN);

        return $r5;

     label09:
        $r8 = "-Infinity";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        $r8 = "-INF";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label10:
        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(#-Infinity);

        return $r5;

     label11:
        $r9 := @caughtexception;

        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r10, "not a valid Double value");

        throw $r11;

     label12:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Double) $r7;

        return $r5;

     label13:
        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r10, $r3);

        throw $r11;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final double _parseDoublePrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        double $d0;
        java.lang.String $r5, $r6;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class $r8;
        com.fasterxml.jackson.databind.JsonMappingException $r9;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $d0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: double getDoubleValue()>();

        return $d0;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label11;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label12;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label08;
            case 73: goto label05;
            case 78: goto label07;
            default: goto label03;
        };

     label03:
        $d0 = staticinvoke <com.fasterxml.jackson.databind.deser.std.StdDeserializer: double parseDouble(java.lang.String)>($r5);

     label04:
        return $d0;

     label05:
        $r6 = "Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label06;

        $r6 = "INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

     label06:
        return #Infinity;

     label07:
        $r6 = "NaN";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

        return #NaN;

     label08:
        $r6 = "-Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label09;

        $r6 = "-INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

     label09:
        return #-Infinity;

     label10:
        $r7 := @caughtexception;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid double value");

        throw $r9;

     label11:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label12;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r8, $r3);

        throw $r9;

     label12:
        return 0.0;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
    }

    protected final java.lang.Float _parseFloat(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        float $f0;
        java.lang.Float $r5;
        java.lang.String $r6, $r8;
        int $i0;
        java.lang.Object $r7;
        char $c1;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class $r10;
        com.fasterxml.jackson.databind.JsonMappingException $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $f0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: float getFloatValue()>();

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label03;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r5 = (java.lang.Float) $r7;

        return $r5;

     label03:
        $c1 = virtualinvoke $r6.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label09;
            case 73: goto label06;
            case 78: goto label08;
            default: goto label04;
        };

     label04:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label05:
        return $r5;

     label06:
        $r8 = "Infinity";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label07;

        $r8 = "INF";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label07:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#InfinityF);

        return $r5;

     label08:
        $r8 = "NaN";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        return $r5;

     label09:
        $r8 = "-Infinity";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 != 0 goto label10;

        $r8 = "-INF";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label04;

     label10:
        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#-InfinityF);

        return $r5;

     label11:
        $r9 := @caughtexception;

        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r10, "not a valid Float value");

        throw $r11;

     label12:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Float) $r7;

        return $r5;

     label13:
        $r10 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r11 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r10, $r3);

        throw $r11;

        catch java.lang.IllegalArgumentException from label04 to label05 with label11;
    }

    protected final float _parseFloatPrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        float $f0;
        java.lang.String $r5, $r6;
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.Class $r8;
        com.fasterxml.jackson.databind.JsonMappingException $r9;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $f0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: float getFloatValue()>();

        return $f0;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label11;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 == 0 goto label12;

        $c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c1)
        {
            case 45: goto label08;
            case 73: goto label05;
            case 78: goto label07;
            default: goto label03;
        };

     label03:
        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

     label04:
        return $f0;

     label05:
        $r6 = "Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label06;

        $r6 = "INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

     label06:
        return #InfinityF;

     label07:
        $r6 = "NaN";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

        return #NaNF;

     label08:
        $r6 = "-Infinity";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label09;

        $r6 = "-INF";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label03;

     label09:
        return #-InfinityF;

     label10:
        $r7 := @caughtexception;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid float value");

        throw $r9;

     label11:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label12;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r8, $r3);

        throw $r9;

     label12:
        return 0.0F;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
    }

    protected final int _parseIntPrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        int $i0;
        java.lang.String $r5;
        long $l1;
        byte $b2;
        java.lang.Class $r6;
        java.lang.StringBuilder $r7;
        com.fasterxml.jackson.databind.JsonMappingException $r8;
        java.lang.IllegalArgumentException $r9;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        return $i0;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label15;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

     label03:
        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

     label04:
        if $i0 <= 9 goto label12;

     label05:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

     label06:
        $b2 = $l1 cmp -2147483648L;

        if $b2 < 0 goto label07;

        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label11;

     label07:
        $r6 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r7 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Overflow: numeric value (");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int (-2147483648 - 2147483647)");

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r6, $r5);

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

        $r6 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r6, "not a valid int value");

        throw $r8;

     label11:
        $i0 = (int) $l1;

        return $i0;

     label12:
        if $i0 == 0 goto label16;

     label13:
        $i0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>($r5);

     label14:
        return $i0;

     label15:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label16;

        $r6 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r6, $r3);

        throw $r8;

     label16:
        return 0;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label13 to label14 with label10;
    }

    protected final java.lang.Integer _parseInteger(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        int $i0;
        java.lang.Integer $r5;
        java.lang.String $r6;
        long $l1;
        byte $b2;
        java.lang.Class $r7;
        java.lang.StringBuilder $r8;
        com.fasterxml.jackson.databind.JsonMappingException $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.Object $r11;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $i0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: int getIntValue()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label19;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label03:
        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

     label04:
        if $i0 <= 9 goto label14;

     label05:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

     label06:
        $b2 = $l1 cmp -2147483648L;

        if $b2 < 0 goto label07;

        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label11;

     label07:
        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = new java.lang.StringBuilder;

     label08:
        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Overflow: numeric value (");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of Integer (-2147483648 - 2147483647)");

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, $r6);

     label09:
        throw $r9;

     label10:
        $r10 := @caughtexception;

        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, "not a valid Integer value");

        throw $r9;

     label11:
        $i0 = (int) $l1;

     label12:
        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label13:
        return $r5;

     label14:
        if $i0 != 0 goto label17;

     label15:
        $r11 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

     label16:
        $r5 = (java.lang.Integer) $r11;

        return $r5;

     label17:
        $i0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label18:
        return $r5;

     label19:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label20;

        $r11 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Integer) $r11;

        return $r5;

     label20:
        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r7, $r3);

        throw $r9;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.IllegalArgumentException from label12 to label13 with label10;
        catch java.lang.IllegalArgumentException from label15 to label16 with label10;
        catch java.lang.IllegalArgumentException from label17 to label18 with label10;
    }

    protected final java.lang.Long _parseLong(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        long $l0;
        java.lang.Long $r5;
        java.lang.String $r6;
        int $i1;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.Class $r9;
        com.fasterxml.jackson.databind.JsonMappingException $r10;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label1;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label2;

     label1:
        $l0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        return $r5;

     label2:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label6;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

        $r5 = (java.lang.Long) $r7;

        return $r5;

     label3:
        $l0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>($r6);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label4:
        return $r5;

     label5:
        $r8 := @caughtexception;

        $r9 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r9, "not a valid Long value");

        throw $r10;

     label6:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label7;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Long) $r7;

        return $r5;

     label7:
        $r9 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r10 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r9, $r3);

        throw $r10;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected final long _parseLongPrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        long $l0;
        java.lang.String $r5;
        int $i1;
        java.lang.IllegalArgumentException $r6;
        java.lang.Class $r7;
        com.fasterxml.jackson.databind.JsonMappingException $r8;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label1;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label2;

     label1:
        $l0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: long getLongValue()>();

        return $l0;

     label2:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label6;

        $r5 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 == 0 goto label7;

     label3:
        $l0 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: long parseLong(java.lang.String)>($r5);

     label4:
        return $l0;

     label5:
        $r6 := @caughtexception;

        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r7, "not a valid long value");

        throw $r8;

     label6:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 == $r4 goto label7;

        $r7 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r8 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r7, $r3);

        throw $r8;

     label7:
        return 0L;

        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    protected java.lang.Short _parseShort(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.core.JsonToken $r3, $r4;
        short $s0;
        java.lang.Short $r5;
        java.lang.String $r6;
        int $i1;
        java.lang.Object $r7;
        java.lang.Class $r8;
        com.fasterxml.jackson.databind.JsonMappingException $r9;
        java.lang.IllegalArgumentException $r10;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonToken getCurrentToken()>();

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_INT>;

        if $r3 == $r4 goto label01;

        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NUMBER_FLOAT>;

        if $r3 != $r4 goto label02;

     label01:
        $s0 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: short getShortValue()>();

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r5;

     label02:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_STRING>;

        if $r3 != $r4 goto label12;

        $r6 = virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: java.lang.String getText()>();

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

     label03:
        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

     label04:
        if $i1 != 0 goto label07;

     label05:
        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getEmptyValue()>();

     label06:
        $r5 = (java.lang.Short) $r7;

        return $r5;

     label07:
        $i1 = staticinvoke <com.fasterxml.jackson.core.io.NumberInput: int parseInt(java.lang.String)>($r6);

     label08:
        if $i1 < -32768 goto label09;

        if $i1 <= 32767 goto label11;

     label09:
        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "overflow, value can not be represented as 16-bit value");

        throw $r9;

     label10:
        $r10 := @caughtexception;

        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r8, "not a valid Short value");

        throw $r9;

     label11:
        $s0 = (short) $i1;

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r5;

     label12:
        $r4 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken VALUE_NULL>;

        if $r3 != $r4 goto label13;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Object getNullValue()>();

        $r5 = (java.lang.Short) $r7;

        return $r5;

     label13:
        $r8 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r9 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException mappingException(java.lang.Class,com.fasterxml.jackson.core.JsonToken)>($r8, $r3);

        throw $r9;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label07 to label08 with label10;
    }

    protected final short _parseShortPrimitive(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        int $i0;
        java.lang.Class $r3;
        com.fasterxml.jackson.databind.JsonMappingException $r4;
        short $s1;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $i0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: int _parseIntPrimitive(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        if $i0 < -32768 goto label1;

        if $i0 <= 32767 goto label2;

     label1:
        $r3 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        $r4 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonMappingException weirdStringException(java.lang.Class,java.lang.String)>($r3, "overflow, value can not be represented as 16-bit value");

        throw $r4;

     label2:
        $s1 = (short) $i0;

        return $s1;
    }

    public java.lang.Object deserializeWithType(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        com.fasterxml.jackson.databind.jsontype.TypeDeserializer $r3;
        java.lang.Object $r4;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r3 := @parameter2: com.fasterxml.jackson.databind.jsontype.TypeDeserializer;

        $r4 = virtualinvoke $r3.<com.fasterxml.jackson.databind.jsontype.TypeDeserializer: java.lang.Object deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)>($r1, $r2);

        return $r4;
    }

    protected com.fasterxml.jackson.databind.JsonDeserializer findDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.databind.DeserializationContext $r1;
        com.fasterxml.jackson.databind.JavaType $r2;
        com.fasterxml.jackson.databind.BeanProperty $r3;
        com.fasterxml.jackson.databind.JsonDeserializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.DeserializationContext;

        $r2 := @parameter1: com.fasterxml.jackson.databind.JavaType;

        $r3 := @parameter2: com.fasterxml.jackson.databind.BeanProperty;

        $r4 = virtualinvoke $r1.<com.fasterxml.jackson.databind.DeserializationContext: com.fasterxml.jackson.databind.JsonDeserializer findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)>($r2, $r3);

        return $r4;
    }

    public java.lang.Class getValueClass()
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        java.lang.Class r1;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        r1 = $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class _valueClass>;

        return r1;
    }

    protected void handleUnknownProperty(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.core.JsonParser $r1;
        com.fasterxml.jackson.databind.DeserializationContext $r2;
        java.lang.String $r3;
        java.lang.Object $r4;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.core.JsonParser;

        $r2 := @parameter1: com.fasterxml.jackson.databind.DeserializationContext;

        $r4 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        if $r4 != null goto label1;

        $r4 = virtualinvoke $r0.<com.fasterxml.jackson.databind.deser.std.StdDeserializer: java.lang.Class getValueClass()>();

     label1:
        $z0 = virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: boolean handleUnknownProperty(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer,java.lang.Object,java.lang.String)>($r1, $r0, $r4, $r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        virtualinvoke $r2.<com.fasterxml.jackson.databind.DeserializationContext: void reportUnknownProperty(java.lang.Object,java.lang.String,com.fasterxml.jackson.databind.JsonDeserializer)>($r4, $r3, $r0);

        virtualinvoke $r1.<com.fasterxml.jackson.core.JsonParser: com.fasterxml.jackson.core.JsonParser skipChildren()>();

        return;
    }

    protected boolean isDefaultDeserializer(com.fasterxml.jackson.databind.JsonDeserializer)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.databind.JsonDeserializer $r1;
        java.lang.Class $r2;
        java.lang.'annotation'.Annotation $r3;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JsonDeserializer;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "com/fasterxml/jackson/databind/annotation/JacksonStdImpl");

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isDefaultKeyDeserializer(com.fasterxml.jackson.databind.KeyDeserializer)
    {
        com.fasterxml.jackson.databind.deser.std.StdDeserializer $r0;
        com.fasterxml.jackson.databind.KeyDeserializer $r1;
        java.lang.Class $r2;
        java.lang.'annotation'.Annotation $r3;

        $r0 := @this: com.fasterxml.jackson.databind.deser.std.StdDeserializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.KeyDeserializer;

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "com/fasterxml/jackson/databind/annotation/JacksonStdImpl");

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }
}

public abstract class com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
    protected final java.text.DateFormat _customFormat;
    protected final boolean _useTimestamp;

    protected void <init>(java.lang.Class, boolean, java.text.DateFormat)
    {
        com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase $r0;
        java.lang.Class $r1;
        boolean $z0;
        java.text.DateFormat $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.text.DateFormat;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdScalarSerializer: void <init>(java.lang.Class)>($r1);

        $r0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: boolean _useTimestamp> = $z0;

        $r0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: java.text.DateFormat _customFormat> = $r2;

        return;
    }

    protected abstract long _timestamp(java.lang.Object);

    public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
    {
        com.fasterxml.jackson.databind.SerializerProvider $r0;
        com.fasterxml.jackson.databind.BeanProperty $r1;
        com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase $r2;
        com.fasterxml.jackson.databind.AnnotationIntrospector $r3;
        com.fasterxml.jackson.databind.introspect.AnnotatedMember $r4;
        com.fasterxml.jackson.'annotation'.JsonFormat$Value $r5;
        com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r6;
        boolean $z0;
        java.util.TimeZone $r7;
        java.lang.String $r8;
        int $i0;
        java.util.Locale $r9, $r10;
        java.text.SimpleDateFormat $r11;
        com.fasterxml.jackson.databind.SerializationConfig $r12;
        java.text.DateFormat $r13;
        java.lang.Class $r14;
        java.lang.Object $r15;

        $r2 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        $r0 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;

        $r1 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        if $r1 == null goto label8;

        $r3 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = interfaceinvoke $r1.<com.fasterxml.jackson.databind.BeanProperty: com.fasterxml.jackson.databind.introspect.AnnotatedMember getMember()>();

        $r5 = virtualinvoke $r3.<com.fasterxml.jackson.databind.AnnotationIntrospector: com.fasterxml.jackson.'annotation'.JsonFormat$Value findFormat(com.fasterxml.jackson.databind.introspect.AnnotatedMember)>($r4);

        if $r5 == null goto label8;

        $r6 = virtualinvoke $r5.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: com.fasterxml.jackson.'annotation'.JsonFormat$Shape getShape()>();

        $z0 = virtualinvoke $r6.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: boolean isNumeric()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(boolean,java.text.DateFormat)>(1, null);

        return $r2;

     label1:
        $r7 = virtualinvoke $r5.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.TimeZone getTimeZone()>();

        $r8 = virtualinvoke $r5.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.lang.String getPattern()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 <= 0 goto label4;

        $r9 = virtualinvoke $r5.<com.fasterxml.jackson.'annotation'.JsonFormat$Value: java.util.Locale getLocale()>();

        $r10 = $r9;

        if $r9 != null goto label2;

        $r10 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: java.util.Locale getLocale()>();

     label2:
        $r11 = new java.text.SimpleDateFormat;

        specialinvoke $r11.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>($r8, $r10);

        if $r7 != null goto label7;

        $r7 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: java.util.TimeZone getTimeZone()>();

     label3:
        virtualinvoke $r11.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r7);

        $r2 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(boolean,java.text.DateFormat)>(0, $r11);

        return $r2;

     label4:
        if $r7 == null goto label8;

        $r12 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.SerializationConfig getConfig()>();

        $r13 = virtualinvoke $r12.<com.fasterxml.jackson.databind.SerializationConfig: java.text.DateFormat getDateFormat()>();

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        if $r14 != class "com/fasterxml/jackson/databind/util/StdDateFormat" goto label6;

        $r13 = staticinvoke <com.fasterxml.jackson.databind.util.StdDateFormat: java.text.DateFormat getISO8601Format(java.util.TimeZone)>($r7);

     label5:
        $r2 = virtualinvoke $r2.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(boolean,java.text.DateFormat)>(0, $r13);

        return $r2;

     label6:
        $r15 = virtualinvoke $r13.<java.text.DateFormat: java.lang.Object clone()>();

        $r13 = (java.text.DateFormat) $r15;

        virtualinvoke $r13.<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>($r7);

        goto label5;

     label7:
        goto label3;

     label8:
        return $r2;
    }

    public boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase $r0;
        java.lang.Object $r1;
        long $l0;
        byte $b1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $l0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase: long _timestamp(java.lang.Object)>($r1);

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public abstract com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase withFormat(boolean, java.text.DateFormat);
}

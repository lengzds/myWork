public final enum class com.fasterxml.jackson.'annotation'.JsonFormat$Shape extends java.lang.Enum
{
    private static final com.fasterxml.jackson.annotation.JsonFormat$Shape[] $VALUES;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape ANY;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape ARRAY;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape BOOLEAN;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_FLOAT;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_INT;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape OBJECT;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape SCALAR;
    public static final enum com.fasterxml.jackson.annotation.JsonFormat$Shape STRING;

    static void <clinit>()
    {
        com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r0;
        com.fasterxml.jackson.annotation.JsonFormat$Shape[] $r1;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("ANY", 0);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape ANY> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("SCALAR", 1);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape SCALAR> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("ARRAY", 2);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape ARRAY> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("OBJECT", 3);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape OBJECT> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER", 4);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER_FLOAT", 5);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_FLOAT> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("NUMBER_INT", 6);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_INT> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("STRING", 7);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape STRING> = $r0;

        $r0 = new com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        specialinvoke $r0.<com.fasterxml.jackson.'annotation'.JsonFormat$Shape: void <init>(java.lang.String,int)>("BOOLEAN", 8);

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape BOOLEAN> = $r0;

        $r1 = newarray (com.fasterxml.jackson.'annotation'.JsonFormat$Shape)[9];

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape ANY>;

        $r1[0] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape SCALAR>;

        $r1[1] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape ARRAY>;

        $r1[2] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape OBJECT>;

        $r1[3] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER>;

        $r1[4] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_FLOAT>;

        $r1[5] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_INT>;

        $r1[6] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape STRING>;

        $r1[7] = $r0;

        $r0 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape BOOLEAN>;

        $r1[8] = $r0;

        <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int)
    {
        com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        return;
    }

    public static com.fasterxml.jackson.annotation.JsonFormat$Shape valueOf(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Enum $r1;
        com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "com/fasterxml/jackson/annotation/JsonFormat$Shape", $r0);

        $r2 = (com.fasterxml.jackson.'annotation'.JsonFormat$Shape) $r1;

        return $r2;
    }

    public static com.fasterxml.jackson.annotation.JsonFormat$Shape[] values()
    {
        java.lang.Object $r0;
        com.fasterxml.jackson.annotation.JsonFormat$Shape[] $r1;

        $r1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (com.fasterxml.jackson.annotation.JsonFormat$Shape[]) $r0;

        return $r1;
    }

    public final boolean isNumeric()
    {
        com.fasterxml.jackson.'annotation'.JsonFormat$Shape $r0, $r1;

        $r0 := @this: com.fasterxml.jackson.'annotation'.JsonFormat$Shape;

        $r1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER>;

        if $r0 == $r1 goto label1;

        $r1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_INT>;

        if $r0 == $r1 goto label1;

        $r1 = <com.fasterxml.jackson.'annotation'.JsonFormat$Shape: com.fasterxml.jackson.annotation.JsonFormat$Shape NUMBER_FLOAT>;

        if $r0 != $r1 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}

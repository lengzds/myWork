public abstract class com.fasterxml.jackson.core.base.ParserMinimalBase extends com.fasterxml.jackson.core.JsonParser
{
    protected com.fasterxml.jackson.core.JsonToken _currToken;
    protected com.fasterxml.jackson.core.JsonToken _lastClearedToken;

    protected void <init>()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        specialinvoke $r0.<com.fasterxml.jackson.core.JsonParser: void <init>()>();

        return;
    }

    protected void <init>(int)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $i0 := @parameter0: int;

        specialinvoke $r0.<com.fasterxml.jackson.core.JsonParser: void <init>(int)>($i0);

        return;
    }

    protected static final java.lang.String _getCharDesc(int)
    {
        int $i0;
        char $c1;
        boolean $z0;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $c1 = (char) $i0;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c1);

        if $z0 == 0 goto label1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("(CTRL-CHAR, code ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        if $i0 <= 255 goto label2;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / 0x");

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("\'");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    protected final com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String, java.lang.Throwable)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        com.fasterxml.jackson.core.JsonParseException $r3;
        com.fasterxml.jackson.core.JsonLocation $r4;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = new com.fasterxml.jackson.core.JsonParseException;

        $r4 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonLocation getCurrentLocation()>();

        specialinvoke $r3.<com.fasterxml.jackson.core.JsonParseException: void <init>(java.lang.String,com.fasterxml.jackson.core.JsonLocation,java.lang.Throwable)>($r1, $r4, $r2);

        return $r3;
    }

    protected void _decodeBase64(java.lang.String, com.fasterxml.jackson.core.util.ByteArrayBuilder, com.fasterxml.jackson.core.Base64Variant)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.String $r1, $r5;
        com.fasterxml.jackson.core.util.ByteArrayBuilder $r2;
        com.fasterxml.jackson.core.Base64Variant $r3;
        int $i0, $i1, $i2, $i4;
        char $c3, $c5;
        boolean $z0;
        java.lang.StringBuilder $r4;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: com.fasterxml.jackson.core.util.ByteArrayBuilder;

        $r3 := @parameter2: com.fasterxml.jackson.core.Base64Variant;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label17;

     label02:
        $i2 = $i1 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $i2 >= $i0 goto label17;

        if $c3 <= 32 goto label16;

        $i4 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>($c3);

        if $i4 >= 0 goto label03;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant,char,int,java.lang.String)>($r3, $c3, 0, null);

     label03:
        if $i2 < $i0 goto label04;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportBase64EOF()>();

     label04:
        $i1 = $i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i2 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>($c3);

        if $i2 >= 0 goto label05;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant,char,int,java.lang.String)>($r3, $c3, 1, null);

     label05:
        $i4 = $i4 << 6;

        $i4 = $i4 | $i2;

        if $i1 < $i0 goto label07;

        $z0 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 != 0 goto label06;

        $i0 = $i4 >> 4;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>($i0);

        return;

     label06:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportBase64EOF()>();

     label07:
        $i2 = $i1 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $i1 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>($c3);

        if $i1 >= 0 goto label11;

        if $i1 == -2 goto label08;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant,char,int,java.lang.String)>($r3, $c3, 2, null);

     label08:
        if $i2 < $i0 goto label09;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportBase64EOF()>();

     label09:
        $i1 = $i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $z0 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>($c3);

        if $z0 != 0 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("expected padding character \'");

        $c5 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant,char,int,java.lang.String)>($r3, $c3, 3, $r5);

     label10:
        $i2 = $i4 >> 4;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void append(int)>($i2);

        goto label01;

     label11:
        $i4 = $i4 << 6;

        $i4 = $i4 | $i1;

        if $i2 < $i0 goto label13;

        $z0 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: boolean usesPadding()>();

        if $z0 != 0 goto label12;

        $i0 = $i4 >> 2;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>($i0);

        return;

     label12:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportBase64EOF()>();

     label13:
        $i1 = $i2 + 1;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2);

        $i2 = virtualinvoke $r3.<com.fasterxml.jackson.core.Base64Variant: int decodeBase64Char(char)>($c3);

        if $i2 >= 0 goto label15;

        if $i2 == -2 goto label14;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant,char,int,java.lang.String)>($r3, $c3, 3, null);

     label14:
        $i2 = $i4 >> 2;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendTwoBytes(int)>($i2);

        goto label01;

     label15:
        $i4 = $i4 << 6;

        $i2 = $i4 | $i2;

        virtualinvoke $r2.<com.fasterxml.jackson.core.util.ByteArrayBuilder: void appendThreeBytes(int)>($i2);

        goto label01;

     label16:
        $i1 = $i2;

        goto label02;

     label17:
        return;
    }

    protected abstract void _handleEOF();

    protected char _handleUnrecognizedCharacterEscape(char)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        char $c0;
        com.fasterxml.jackson.core.JsonParser$Feature $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $c0 := @parameter0: char;

        $r1 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER>;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>($r1);

        if $z0 == 0 goto label1;

        return $c0;

     label1:
        if $c0 != 39 goto label2;

        $r1 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_SINGLE_QUOTES>;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>($r1);

        if $z0 != 0 goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unrecognized character escape ");

        $r3 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>($c0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r3);

     label3:
        return $c0;
    }

    protected void _reportBase64EOF()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        com.fasterxml.jackson.core.JsonParseException $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>("Unexpected end-of-String in base64 content");

        throw $r1;
    }

    protected final void _reportError(java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.String $r1;
        com.fasterxml.jackson.core.JsonParseException $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r1);

        throw $r2;
    }

    protected void _reportInvalidBase64(com.fasterxml.jackson.core.Base64Variant, char, int, java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        com.fasterxml.jackson.core.Base64Variant $r1;
        char $c0;
        int $i1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        com.fasterxml.jackson.core.JsonParseException $r5;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: com.fasterxml.jackson.core.Base64Variant;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        if $c0 > 32 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal white space character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") as character #");

        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: can only used between units");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        if $r2 == null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r5 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String)>($r4);

        throw $r5;

     label3:
        $z0 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: boolean usesPaddingChar(char)>($c0);

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected padding character (\'");

        $c0 = virtualinvoke $r1.<com.fasterxml.jackson.core.Base64Variant: char getPaddingChar()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\') as character #");

        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of 4-char base64 unit: padding only legal as 3rd or 4th character");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        $z0 = staticinvoke <java.lang.Character: boolean isDefined(char)>($c0);

        if $z0 == 0 goto label5;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c0);

        if $z0 == 0 goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal character (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal character \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (code 0x");

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in base64 content");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    protected void _reportInvalidEOF()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.StringBuilder $r1;
        com.fasterxml.jackson.core.JsonToken $r2;
        java.lang.String $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(" in ");

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String)>($r3);

        return;
    }

    protected void _reportInvalidEOF(java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected end-of-input");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r1);

        return;
    }

    protected void _reportInvalidEOFInValue()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportInvalidEOF(java.lang.String)>(" in a value");

        return;
    }

    protected void _reportUnexpectedChar(int, java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        int $i0;
        java.lang.String $r1, $r3, $r4;
        java.lang.StringBuilder $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unexpected character (");

        $r3 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r3;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r4);

        return;
    }

    protected final void _throwInternal()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: this code path should never get executed");

        throw $r1;
    }

    protected void _throwInvalidSpace(int)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        int $i0;
        char $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $i0 := @parameter0: int;

        $c1 = (char) $i0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal character (");

        $r2 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): only regular white space (\\r, \\n, \\t) is allowed between tokens");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r2);

        return;
    }

    protected void _throwUnquotedSpace(int, java.lang.String)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        int $i0;
        java.lang.String $r1, $r4;
        com.fasterxml.jackson.core.JsonParser$Feature $r2;
        boolean $z0;
        char $c1;
        java.lang.StringBuilder $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = <com.fasterxml.jackson.core.JsonParser$Feature: com.fasterxml.jackson.core.JsonParser$Feature ALLOW_UNQUOTED_CONTROL_CHARS>;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: boolean isEnabled(com.fasterxml.jackson.core.JsonParser$Feature)>($r2);

        if $z0 == 0 goto label1;

        if $i0 < 32 goto label2;

     label1:
        $c1 = (char) $i0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Illegal unquoted character (");

        $r4 = staticinvoke <com.fasterxml.jackson.core.base.ParserMinimalBase: java.lang.String _getCharDesc(int)>($c1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): has to be escaped using backslash to be included in ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _reportError(java.lang.String)>($r1);

     label2:
        return;
    }

    protected final void _wrapError(java.lang.String, java.lang.Throwable)
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        com.fasterxml.jackson.core.JsonParseException $r3;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonParseException _constructError(java.lang.String,java.lang.Throwable)>($r1, $r2);

        throw $r3;
    }

    public void clearCurrentToken()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r1 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _lastClearedToken> = $r1;

        $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken> = null;

     label1:
        return;
    }

    public com.fasterxml.jackson.core.JsonToken getCurrentToken()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        com.fasterxml.jackson.core.JsonToken r1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        r1 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        return r1;
    }

    public abstract java.lang.String getText();

    public abstract com.fasterxml.jackson.core.JsonToken nextToken();

    public com.fasterxml.jackson.core.JsonToken nextValue()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        com.fasterxml.jackson.core.JsonToken $r1, $r2;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();

        $r1 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken FIELD_NAME>;

        if $r2 != $r1 goto label1;

        $r1 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();

        return $r1;

     label1:
        return $r2;
    }

    public com.fasterxml.jackson.core.JsonParser skipChildren()
    {
        com.fasterxml.jackson.core.base.ParserMinimalBase $r0;
        int[] $r1;
        com.fasterxml.jackson.core.JsonToken $r2, $r3;
        int $i0, $i1;

        $r0 := @this: com.fasterxml.jackson.core.base.ParserMinimalBase;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_OBJECT>;

        if $r2 == $r3 goto label1;

        $r2 = $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken _currToken>;

        $r3 = <com.fasterxml.jackson.core.JsonToken: com.fasterxml.jackson.core.JsonToken START_ARRAY>;

        if $r2 == $r3 goto label1;

        return $r0;

     label1:
        $i0 = 1;

     label2:
        $r2 = virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: com.fasterxml.jackson.core.JsonToken nextToken()>();

        if $r2 != null goto label3;

        virtualinvoke $r0.<com.fasterxml.jackson.core.base.ParserMinimalBase: void _handleEOF()>();

        return $r0;

     label3:
        $r1 = <com.fasterxml.jackson.core.base.ParserMinimalBase$1: int[] $SwitchMap$com$fasterxml$jackson$core$JsonToken>;

        $i1 = virtualinvoke $r2.<com.fasterxml.jackson.core.JsonToken: int ordinal()>();

        $i1 = $r1[$i1];

        lookupswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label6;
            default: goto label4;
        };

     label4:
        goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label2;

     label6:
        $i0 = $i0 + -1;

        if $i0 != 0 goto label2;

        return $r0;
    }
}

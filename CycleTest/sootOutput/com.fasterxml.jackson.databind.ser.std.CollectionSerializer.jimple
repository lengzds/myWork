public class com.fasterxml.jackson.databind.ser.std.CollectionSerializer extends com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase
{

    public void <init>(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        boolean $z0;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r2;
        com.fasterxml.jackson.databind.BeanProperty $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r3 := @parameter3: com.fasterxml.jackson.databind.BeanProperty;

        $r4 := @parameter4: com.fasterxml.jackson.databind.JsonSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void <init>(java.lang.Class,com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>(class "java/util/Collection", $r1, $z0, $r2, $r3, $r4);

        return;
    }

    public void <init>(com.fasterxml.jackson.databind.ser.std.CollectionSerializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0, $r1;
        com.fasterxml.jackson.databind.BeanProperty $r2;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        $r3 := @parameter2: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r4 := @parameter3: com.fasterxml.jackson.databind.JsonSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase: void <init>(com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>($r1, $r2, $r3, $r4);

        return;
    }

    public com.fasterxml.jackson.databind.ser.ContainerSerializer _withValueTypeSerializer(com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0, $r2;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r1;
        com.fasterxml.jackson.databind.JavaType $r3;
        boolean $z0;
        com.fasterxml.jackson.databind.BeanProperty $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r2 = new com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r3 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JavaType _elementType>;

        $z0 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean _staticTyping>;

        $r4 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _elementSerializer>;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void <init>(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer)>($r3, $z0, $r1, $r4, $r5);

        return $r2;
    }

    public volatile boolean hasSingleElement(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.Collection $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean hasSingleElement(java.util.Collection)>($r2);

        return $z0;
    }

    public boolean hasSingleElement(java.util.Collection)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        java.util.Collection $r1;
        java.util.Iterator $r2;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public volatile boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.Collection $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Collection) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: boolean isEmpty(java.util.Collection)>($r2);

        return $z0;
    }

    public boolean isEmpty(java.util.Collection)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        java.util.Collection $r1;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public volatile void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        java.lang.Object $r3;
        java.util.Collection $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (java.util.Collection) $r3;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContents(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r4, $r1, $r2);

        return;
    }

    public void serializeContents(java.util.Collection, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        java.util.Collection $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5, $r10;
        java.util.Iterator $r6;
        boolean $z0;
        com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap $r7;
        int $i0;
        java.lang.Object $r8;
        java.lang.Class $r9;
        com.fasterxml.jackson.databind.JavaType $r11;
        java.lang.Exception $r12;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _elementSerializer>;

        if $r5 == null goto label01;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _elementSerializer>;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void serializeContentsUsing(java.util.Collection,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JsonSerializer)>($r1, $r2, $r3, $r5);

        return;

     label01:
        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label23;

        $r7 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap _dynamicSerializers>;

        $r4 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        $i0 = 0;

     label02:
        $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

     label03:
        if $r8 != null goto label08;

     label04:
        virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>($r2);

     label05:
        $i0 = $i0 + 1;

     label06:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

     label07:
        if $z0 != 0 goto label02;

        return;

     label08:
        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r7.<com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap: com.fasterxml.jackson.databind.JsonSerializer serializerFor(java.lang.Class)>($r9);

     label09:
        $r10 = $r5;

        if $r5 != null goto label15;

     label10:
        $r11 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JavaType _elementType>;

        $z0 = virtualinvoke $r11.<com.fasterxml.jackson.databind.JavaType: boolean hasGenericTypes()>();

     label11:
        if $z0 == 0 goto label19;

     label12:
        $r11 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JavaType _elementType>;

        $r11 = virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JavaType constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class)>($r11, $r9);

        $r5 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.SerializerProvider)>($r7, $r11, $r3);

     label13:
        $r7 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label14:
        $r10 = $r5;

     label15:
        if $r4 != null goto label21;

     label16:
        virtualinvoke $r10.<com.fasterxml.jackson.databind.JsonSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r8, $r2, $r3);

     label17:
        goto label05;

     label18:
        $r12 := @caughtexception;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r3, $r12, $r1, $i0);

        return;

     label19:
        $r5 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.JsonSerializer _findAndAddDynamic(com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap,java.lang.Class,com.fasterxml.jackson.databind.SerializerProvider)>($r7, $r9, $r3);

     label20:
        goto label13;

     label21:
        virtualinvoke $r10.<com.fasterxml.jackson.databind.JsonSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r8, $r2, $r3, $r4);

     label22:
        goto label05;

     label23:
        return;

        catch java.lang.Exception from label02 to label03 with label18;
        catch java.lang.Exception from label04 to label05 with label18;
        catch java.lang.Exception from label06 to label07 with label18;
        catch java.lang.Exception from label08 to label09 with label18;
        catch java.lang.Exception from label10 to label11 with label18;
        catch java.lang.Exception from label12 to label13 with label18;
        catch java.lang.Exception from label13 to label14 with label18;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label20 with label18;
        catch java.lang.Exception from label21 to label22 with label18;
    }

    public void serializeContentsUsing(java.util.Collection, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        java.util.Collection $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r4;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r5;
        java.util.Iterator $r6;
        boolean $z0;
        int $i0;
        java.lang.Object $r7;
        java.lang.Exception $r8;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: java.util.Collection;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 := @parameter3: com.fasterxml.jackson.databind.JsonSerializer;

        $r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.jsontype.TypeSerializer _valueTypeSerializer>;

        $i0 = 0;

     label01:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        if $r7 != null goto label05;

     label02:
        virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>($r2);

     label03:
        $i0 = $i0 + 1;

     label04:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label01;

        return;

     label05:
        if $r5 != null goto label09;

     label06:
        virtualinvoke $r4.<com.fasterxml.jackson.databind.JsonSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r7, $r2, $r3);

     label07:
        goto label03;

     label08:
        $r8 := @caughtexception;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)>($r3, $r8, $r1, $i0);

        goto label04;

     label09:
        virtualinvoke $r4.<com.fasterxml.jackson.databind.JsonSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r7, $r2, $r3, $r5);

     label10:
        goto label03;

     label11:
        return;

        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label08;
    }

    public volatile com.fasterxml.jackson.databind.ser.std.AsArraySerializerBase withResolved(com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0;
        com.fasterxml.jackson.databind.BeanProperty $r1;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r2;
        com.fasterxml.jackson.databind.JsonSerializer $r3;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.BeanProperty;

        $r2 := @parameter1: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;

        $r0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: com.fasterxml.jackson.databind.ser.std.CollectionSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>($r1, $r2, $r3);

        return $r0;
    }

    public com.fasterxml.jackson.databind.ser.std.CollectionSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.CollectionSerializer $r0, $r4;
        com.fasterxml.jackson.databind.BeanProperty $r1;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r2;
        com.fasterxml.jackson.databind.JsonSerializer $r3;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.BeanProperty;

        $r2 := @parameter1: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;

        $r4 = new com.fasterxml.jackson.databind.ser.std.CollectionSerializer;

        specialinvoke $r4.<com.fasterxml.jackson.databind.ser.std.CollectionSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.CollectionSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.JsonSerializer)>($r0, $r1, $r2, $r3);

        return $r4;
    }
}

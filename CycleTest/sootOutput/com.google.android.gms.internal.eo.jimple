public final class com.google.android.gms.internal.eo extends java.lang.Object
{
    private static final java.util.concurrent.ThreadFactory a;
    private static final java.util.concurrent.ThreadPoolExecutor b;

    static void <clinit>()
    {
        java.util.concurrent.ThreadPoolExecutor $r0;
        java.util.concurrent.TimeUnit $r1;
        java.util.concurrent.SynchronousQueue $r2;
        java.util.concurrent.ThreadFactory $r3;
        com.google.android.gms.internal.eo$2 $r4;

        $r4 = new com.google.android.gms.internal.eo$2;

        specialinvoke $r4.<com.google.android.gms.internal.eo$2: void <init>()>();

        <com.google.android.gms.internal.eo: java.util.concurrent.ThreadFactory a> = $r4;

        $r0 = new java.util.concurrent.ThreadPoolExecutor;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>(boolean)>(1);

        $r3 = <com.google.android.gms.internal.eo: java.util.concurrent.ThreadFactory a>;

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 10, 65L, $r1, $r2, $r3);

        <com.google.android.gms.internal.eo: java.util.concurrent.ThreadPoolExecutor b> = $r0;

        return;
    }

    public static void execute(java.lang.Runnable)
    {
        java.lang.Runnable $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        com.google.android.gms.internal.eo$1 $r2;
        java.util.concurrent.RejectedExecutionException $r3;
        java.lang.StringBuilder $r4;
        int $i0;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.Runnable;

        $r1 = <com.google.android.gms.internal.eo: java.util.concurrent.ThreadPoolExecutor b>;

        $r2 = new com.google.android.gms.internal.eo$1;

     label1:
        specialinvoke $r2.<com.google.android.gms.internal.eo$1: void <init>(java.lang.Runnable)>($r0);

        virtualinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Too many background threads already running. Aborting task.  Current pool size: ");

        $i0 = staticinvoke <com.google.android.gms.internal.eo: int getPoolSize()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.android.gms.internal.ev: void c(java.lang.String,java.lang.Throwable)>($r5, $r3);

        return;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public static int getPoolSize()
    {
        int $i0;
        java.util.concurrent.ThreadPoolExecutor $r0;

        $r0 = <com.google.android.gms.internal.eo: java.util.concurrent.ThreadPoolExecutor b>;

        $i0 = virtualinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        return $i0;
    }
}

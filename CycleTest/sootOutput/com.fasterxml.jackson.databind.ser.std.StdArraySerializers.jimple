public class com.fasterxml.jackson.databind.ser.std.StdArraySerializers extends java.lang.Object
{
    protected static final java.util.HashMap _arraySerializers;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer $r3;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r4;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer $r5;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer $r6;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer $r7;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer $r8;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer $r9;
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer $r10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers> = $r0;

        $r1 = class "[Z";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer;

        specialinvoke $r3.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$BooleanArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[B";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        specialinvoke $r4.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r4);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[C";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer;

        specialinvoke $r5.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$CharArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[S";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r6 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer;

        specialinvoke $r6.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ShortArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[I";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer;

        specialinvoke $r7.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$IntArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r7);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[J";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r8 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer;

        specialinvoke $r8.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$LongArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[F";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r9 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer;

        specialinvoke $r9.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$FloatArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        $r0 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r1 = class "[D";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = new com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer;

        specialinvoke $r10.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$DoubleArraySerializer: void <init>()>();

        virtualinvoke $r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r10);

        return;
    }

    public static com.fasterxml.jackson.databind.JsonSerializer findStandardImpl(java.lang.Class)
    {
        java.lang.Class $r0;
        java.util.HashMap $r1;
        java.lang.String $r2;
        java.lang.Object $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r4;

        $r0 := @parameter0: java.lang.Class;

        $r1 = <com.fasterxml.jackson.databind.ser.std.StdArraySerializers: java.util.HashMap _arraySerializers>;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (com.fasterxml.jackson.databind.JsonSerializer) $r3;

        return $r4;
    }
}

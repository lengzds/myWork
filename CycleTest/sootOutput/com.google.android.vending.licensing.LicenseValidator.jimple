class com.google.android.vending.licensing.LicenseValidator extends java.lang.Object
{
    private final com.google.android.vending.licensing.Policy a;
    private final com.google.android.vending.licensing.LicenseCheckerCallback b;
    private final int c;
    private final java.lang.String d;
    private final java.lang.String e;
    private final com.google.android.vending.licensing.DeviceLimiter f;

    private void handleApplicationError(int)
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        int $i0;
        com.google.android.vending.licensing.LicenseCheckerCallback $r1;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r1.<com.google.android.vending.licensing.LicenseCheckerCallback: void applicationError(int)>($i0);

        return;
    }

    private void handleInvalidResponse()
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        com.google.android.vending.licensing.LicenseCheckerCallback $r1;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        $r1 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r1.<com.google.android.vending.licensing.LicenseCheckerCallback: void dontAllow(int)>(561);

        return;
    }

    private void handleResponse(int, com.google.android.vending.licensing.ResponseData)
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        int $i0;
        com.google.android.vending.licensing.ResponseData $r1;
        boolean $z0;
        com.google.android.vending.licensing.Policy $r2;
        com.google.android.vending.licensing.LicenseCheckerCallback $r3;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.google.android.vending.licensing.ResponseData;

        $r2 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.Policy a>;

        interfaceinvoke $r2.<com.google.android.vending.licensing.Policy: void processServerResponse(int,com.google.android.vending.licensing.ResponseData)>($i0, $r1);

        $r2 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.Policy a>;

        $z0 = interfaceinvoke $r2.<com.google.android.vending.licensing.Policy: boolean allowAccess()>();

        if $z0 == 0 goto label1;

        $r3 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r3.<com.google.android.vending.licensing.LicenseCheckerCallback: void allow(int)>($i0);

        return;

     label1:
        $r3 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r3.<com.google.android.vending.licensing.LicenseCheckerCallback: void dontAllow(int)>($i0);

        return;
    }

    public com.google.android.vending.licensing.LicenseCheckerCallback getCallback()
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        com.google.android.vending.licensing.LicenseCheckerCallback r1;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        r1 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        return r1;
    }

    public int getNonce()
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        int i0;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        i0 = $r0.<com.google.android.vending.licensing.LicenseValidator: int c>;

        return i0;
    }

    public java.lang.String getPackageName()
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        java.lang.String r1;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        r1 = $r0.<com.google.android.vending.licensing.LicenseValidator: java.lang.String d>;

        return r1;
    }

    public void verify(java.security.PublicKey, int, java.lang.String, java.lang.String)
    {
        com.google.android.vending.licensing.LicenseValidator $r0;
        java.security.PublicKey $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r3;
        com.google.android.vending.licensing.ResponseData $r4, $r14;
        java.security.Signature $r5;
        byte[] $r6;
        boolean $z0;
        java.security.NoSuchAlgorithmException $r7;
        java.lang.RuntimeException $r8;
        java.security.InvalidKeyException $r9;
        java.security.SignatureException $r10;
        com.google.android.vending.licensing.util.Base64DecoderException $r11;
        java.lang.Exception $r12;
        com.google.android.vending.licensing.LicenseCheckerCallback $r13;
        java.lang.IllegalArgumentException $r15;
        com.google.android.vending.licensing.DeviceLimiter $r16;

        $r0 := @this: com.google.android.vending.licensing.LicenseValidator;

        $r1 := @parameter0: java.security.PublicKey;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 = null;

        if $i0 == 0 goto label01;

        if $i0 == 1 goto label01;

        if $i0 != 2 goto label17;

     label01:
        $r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA1withRSA");

        virtualinvoke $r5.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r6 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r5.<java.security.Signature: void update(byte[])>($r6);

        $r6 = staticinvoke <com.google.android.vending.licensing.util.Base64: byte[] decode(java.lang.String)>($r3);

        $z0 = virtualinvoke $r5.<java.security.Signature: boolean verify(byte[])>($r6);

     label02:
        if $z0 != 0 goto label10;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Signature verification failed.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

     label04:
        return;

     label05:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label06:
        $r9 := @caughtexception;

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleApplicationError(int)>(5);

        return;

     label07:
        $r10 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw $r8;

     label08:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not Base64-decode signature.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label09:
        $r12 := @caughtexception;

        $r13 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.LicenseCheckerCallback b>;

        interfaceinvoke $r13.<com.google.android.vending.licensing.LicenseCheckerCallback: void dontAllow(int)>(291);

        return;

     label10:
        $r14 = staticinvoke <com.google.android.vending.licensing.ResponseData: com.google.android.vending.licensing.ResponseData parse(java.lang.String)>($r2);

     label11:
        $r4 = $r14;

        $i1 = $r14.<com.google.android.vending.licensing.ResponseData: int a>;

        if $i1 == $i0 goto label13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Response codes don\'t match.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label12:
        $r15 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Could not parse response.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label13:
        $i1 = $r14.<com.google.android.vending.licensing.ResponseData: int b>;

        $i2 = $r0.<com.google.android.vending.licensing.LicenseValidator: int c>;

        if $i1 == $i2 goto label14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Nonce doesn\'t match.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label14:
        $r2 = $r14.<com.google.android.vending.licensing.ResponseData: java.lang.String c>;

        $r3 = $r0.<com.google.android.vending.licensing.LicenseValidator: java.lang.String d>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Package name doesn\'t match.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label15:
        $r2 = $r14.<com.google.android.vending.licensing.ResponseData: java.lang.String d>;

        $r3 = $r0.<com.google.android.vending.licensing.LicenseValidator: java.lang.String e>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label16;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Version codes don\'t match.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label16:
        $r2 = $r14.<com.google.android.vending.licensing.ResponseData: java.lang.String e>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "User identifier is empty.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label17:
        $r2 = null;

     label18:
        lookupswitch($i0)
        {
            case 0: goto label20;
            case 1: goto label21;
            case 2: goto label20;
            case 3: goto label27;
            case 4: goto label23;
            case 5: goto label24;
            case 257: goto label22;
            case 258: goto label25;
            case 259: goto label26;
            default: goto label19;
        };

     label19:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LicenseValidator", "Unknown response code for license check.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleInvalidResponse()>();

        return;

     label20:
        $r16 = $r0.<com.google.android.vending.licensing.LicenseValidator: com.google.android.vending.licensing.DeviceLimiter f>;

        $i0 = interfaceinvoke $r16.<com.google.android.vending.licensing.DeviceLimiter: int isDeviceAllowed(java.lang.String)>($r2);

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleResponse(int,com.google.android.vending.licensing.ResponseData)>($i0, $r4);

        return;

     label21:
        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleResponse(int,com.google.android.vending.licensing.ResponseData)>(561, $r4);

        return;

     label22:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Error contacting licensing server.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleResponse(int,com.google.android.vending.licensing.ResponseData)>(291, $r4);

        return;

     label23:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "An error has occurred on the licensing server.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleResponse(int,com.google.android.vending.licensing.ResponseData)>(291, $r4);

        return;

     label24:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LicenseValidator", "Licensing server is refusing to talk to this device, over quota.");

        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleResponse(int,com.google.android.vending.licensing.ResponseData)>(291, $r4);

        return;

     label25:
        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleApplicationError(int)>(1);

        return;

     label26:
        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleApplicationError(int)>(2);

        return;

     label27:
        specialinvoke $r0.<com.google.android.vending.licensing.LicenseValidator: void handleApplicationError(int)>(3);

        return;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label05;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label05;
        catch java.security.InvalidKeyException from label01 to label02 with label06;
        catch java.security.InvalidKeyException from label03 to label04 with label06;
        catch java.security.SignatureException from label01 to label02 with label07;
        catch java.security.SignatureException from label03 to label04 with label07;
        catch com.google.android.vending.licensing.util.Base64DecoderException from label01 to label02 with label08;
        catch com.google.android.vending.licensing.util.Base64DecoderException from label03 to label04 with label08;
        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }
}

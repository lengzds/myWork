public final class com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer
{

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "[B");

        return;
    }

    public final volatile boolean isEmpty(java.lang.Object)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;
        boolean $z0;
        java.lang.Object $r1;
        byte[] $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = (byte[]) $r1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: boolean isEmpty(byte[])>($r2);

        return $z0;
    }

    public final boolean isEmpty(byte[])
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        $r1 := @parameter0: byte[];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        java.lang.Object $r3;
        byte[] $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        $r3 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = (byte[]) $r3;

        virtualinvoke $r1.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r4);

        return;
    }

    public final volatile void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;
        com.fasterxml.jackson.core.JsonGenerator $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r3;
        java.lang.Object $r4;
        byte[] $r5;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        $r4 := @parameter0: java.lang.Object;

        $r1 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r3 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        $r5 = (byte[]) $r4;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer: void serializeWithType(byte[],com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r5, $r1, $r2, $r3);

        return;
    }

    public final void serializeWithType(byte[], com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer $r0;
        byte[] $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.StdArraySerializers$ByteArraySerializer;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeBinary(byte[])>($r1);

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        return;
    }
}

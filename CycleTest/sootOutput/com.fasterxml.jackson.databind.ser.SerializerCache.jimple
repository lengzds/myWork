public final class com.fasterxml.jackson.databind.ser.SerializerCache extends java.lang.Object
{
    private com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap;
    private java.util.HashMap _sharedMap;

    public void <init>()
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        java.util.HashMap $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(64);

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap> = $r1;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

        return;
    }

    public final void addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.util.HashMap $r6;
        boolean $z0;
        com.fasterxml.jackson.databind.ser.ResolvableSerializer $r7;
        java.lang.Throwable $r8;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        $r5 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        entermonitor $r0;

     label1:
        $r6 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>($r1, 0);

        $r4 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $r4 != null goto label2;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        $z0 = $r5 instanceof com.fasterxml.jackson.databind.ser.ResolvableSerializer;

        if $z0 == 0 goto label3;

        $r7 = (com.fasterxml.jackson.databind.ser.ResolvableSerializer) $r5;

        interfaceinvoke $r7.<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>($r2);

     label3:
        exitmonitor $r0;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public final void addAndResolveNonTypedSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        java.lang.Class $r1;
        com.fasterxml.jackson.databind.SerializerProvider $r2;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.util.HashMap $r6;
        boolean $z0;
        com.fasterxml.jackson.databind.ser.ResolvableSerializer $r7;
        java.lang.Throwable $r8;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: java.lang.Class;

        $r5 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        $r2 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        entermonitor $r0;

     label1:
        $r6 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>($r1, 0);

        $r4 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        if $r4 != null goto label2;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        $z0 = $r5 instanceof com.fasterxml.jackson.databind.ser.ResolvableSerializer;

        if $z0 == 0 goto label3;

        $r7 = (com.fasterxml.jackson.databind.ser.ResolvableSerializer) $r5;

        interfaceinvoke $r7.<com.fasterxml.jackson.databind.ser.ResolvableSerializer: void resolve(com.fasterxml.jackson.databind.SerializerProvider)>($r2);

     label3:
        exitmonitor $r0;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label4 with label5;
    }

    public final void addTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        com.fasterxml.jackson.databind.JsonSerializer $r2;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        $r2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        entermonitor $r0;

     label1:
        $r5 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>($r1, 1);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $r4 != null goto label2;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public final void addTypedSerializer(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        java.lang.Class $r1;
        com.fasterxml.jackson.databind.JsonSerializer $r2;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r3;
        java.lang.Object $r4;
        java.util.HashMap $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        entermonitor $r0;

     label1:
        $r5 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r3.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>($r1, 1);

        $r4 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $r4 != null goto label2;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = null;

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public final com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap getReadOnlyLookupMap()
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap $r1, $r3;
        java.util.HashMap $r2;
        java.lang.Throwable $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap>;

        if $r1 != null goto label2;

        $r2 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r3 = staticinvoke <com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap 'from'(java.util.HashMap)>($r2);

        $r1 = $r3;

        $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap _readOnlyMap> = $r3;

     label2:
        exitmonitor $r0;

     label3:
        $r1 = virtualinvoke $r1.<com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap instance()>();

        return $r1;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public final com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(com.fasterxml.jackson.databind.JavaType)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        entermonitor $r0;

     label1:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>($r1, 1);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.fasterxml.jackson.databind.JsonSerializer) $r3;

        exitmonitor $r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final com.fasterxml.jackson.databind.JsonSerializer typedValueSerializer(java.lang.Class)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        java.lang.Class $r1;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: java.lang.Class;

        entermonitor $r0;

     label1:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>($r1, 1);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.fasterxml.jackson.databind.JsonSerializer) $r3;

        exitmonitor $r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        com.fasterxml.jackson.databind.JavaType $r1;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: com.fasterxml.jackson.databind.JavaType;

        entermonitor $r0;

     label1:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(com.fasterxml.jackson.databind.JavaType,boolean)>($r1, 0);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.fasterxml.jackson.databind.JsonSerializer) $r3;

        exitmonitor $r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final com.fasterxml.jackson.databind.JsonSerializer untypedValueSerializer(java.lang.Class)
    {
        com.fasterxml.jackson.databind.ser.SerializerCache $r0;
        java.lang.Class $r1;
        com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;
        com.fasterxml.jackson.databind.JsonSerializer $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.fasterxml.jackson.databind.ser.SerializerCache;

        $r1 := @parameter0: java.lang.Class;

        entermonitor $r0;

     label1:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.SerializerCache: java.util.HashMap _sharedMap>;

        $r2 = new com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey;

        specialinvoke $r2.<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: void <init>(java.lang.Class,boolean)>($r1, 0);

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.fasterxml.jackson.databind.JsonSerializer) $r3;

        exitmonitor $r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}

public abstract class com.fasterxml.jackson.databind.ser.std.ArraySerializerBase extends com.fasterxml.jackson.databind.ser.ContainerSerializer
{
    protected final com.fasterxml.jackson.databind.BeanProperty _property;

    protected void <init>(com.fasterxml.jackson.databind.ser.std.ArraySerializerBase, com.fasterxml.jackson.databind.BeanProperty)
    {
        com.fasterxml.jackson.databind.ser.std.ArraySerializerBase $r0, $r1;
        com.fasterxml.jackson.databind.BeanProperty $r2;
        java.lang.Class $r3;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r1 := @parameter0: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        $r3 = $r1.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: java.lang.Class _handledType>;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(java.lang.Class,boolean)>($r3, 0);

        $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: com.fasterxml.jackson.databind.BeanProperty _property> = $r2;

        return;
    }

    protected void <init>(java.lang.Class)
    {
        com.fasterxml.jackson.databind.ser.std.ArraySerializerBase $r0;
        java.lang.Class $r1;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(java.lang.Class)>($r1);

        $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: com.fasterxml.jackson.databind.BeanProperty _property> = null;

        return;
    }

    protected void <init>(java.lang.Class, com.fasterxml.jackson.databind.BeanProperty)
    {
        com.fasterxml.jackson.databind.ser.std.ArraySerializerBase $r0;
        java.lang.Class $r1;
        com.fasterxml.jackson.databind.BeanProperty $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.ContainerSerializer: void <init>(java.lang.Class)>($r1);

        $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: com.fasterxml.jackson.databind.BeanProperty _property> = $r2;

        return;
    }

    public final void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.ArraySerializerBase $r0;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.SerializationFeature $r4;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED>;

        $z0 = virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($r4);

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: boolean hasSingleElement(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r1, $r2, $r3);

        return;

     label1:
        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeStartArray()>();

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r2.<com.fasterxml.jackson.core.JsonGenerator: void writeEndArray()>();

        return;
    }

    protected abstract void serializeContents(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider);

    public final void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.ArraySerializerBase $r0;
        java.lang.Object $r1;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.ArraySerializerBase;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypePrefixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.ArraySerializerBase: void serializeContents(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r1, $r2, $r3);

        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypeSuffixForArray(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

        return;
    }
}

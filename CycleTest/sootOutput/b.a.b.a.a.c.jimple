public final class b.a.b.a.a.c extends java.lang.Object
{
    private static final org.apache.http.util.ByteArrayBuffer a;
    private static final org.apache.http.util.ByteArrayBuffer b;
    private static final org.apache.http.util.ByteArrayBuffer c;
    private final java.lang.String d;
    private final java.nio.charset.Charset e;
    private final java.lang.String f;
    private final java.util.List g;
    private final b.a.b.a.a.e h;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0;
        org.apache.http.util.ByteArrayBuffer $r1;

        $r0 = <b.a.b.a.a.f: java.nio.charset.Charset a>;

        $r1 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r0, ": ");

        <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a> = $r1;

        $r0 = <b.a.b.a.a.f: java.nio.charset.Charset a>;

        $r1 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r0, "\r\n");

        <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b> = $r1;

        $r0 = <b.a.b.a.a.f: java.nio.charset.Charset a>;

        $r1 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r0, "--");

        <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer c> = $r1;

        return;
    }

    public void <init>(java.lang.String, java.nio.charset.Charset, java.lang.String, b.a.b.a.a.e)
    {
        b.a.b.a.a.c $r0;
        java.lang.String $r1, $r2;
        b.a.b.a.a.e $r3;
        java.nio.charset.Charset $r4;
        java.lang.IllegalArgumentException $r5;
        java.util.ArrayList $r6;

        $r0 := @this: b.a.b.a.a.c;

        $r1 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: b.a.b.a.a.e;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multipart subtype may not be null");

        throw $r5;

     label1:
        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multipart boundary may not be null");

        throw $r5;

     label2:
        $r0.<b.a.b.a.a.c: java.lang.String d> = $r1;

        if $r4 == null goto label4;

     label3:
        $r0.<b.a.b.a.a.c: java.nio.charset.Charset e> = $r4;

        $r0.<b.a.b.a.a.c: java.lang.String f> = $r2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r0.<b.a.b.a.a.c: java.util.List g> = $r6;

        $r0.<b.a.b.a.a.c: b.a.b.a.a.e h> = $r3;

        return;

     label4:
        $r4 = <b.a.b.a.a.f: java.nio.charset.Charset a>;

        goto label3;
    }

    private static org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset, java.lang.String)
    {
        java.nio.charset.Charset $r0;
        java.lang.String $r1;
        org.apache.http.util.ByteArrayBuffer $r2;
        java.nio.CharBuffer $r3;
        java.nio.ByteBuffer $r4;
        int $i0, $i1;
        byte[] $r5;

        $r0 := @parameter0: java.nio.charset.Charset;

        $r1 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>($r1);

        $r4 = virtualinvoke $r0.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r3);

        $r2 = new org.apache.http.util.ByteArrayBuffer;

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r5, $i0, $i1);

        return $r2;
    }

    private void a(b.a.b.a.a.e, java.io.OutputStream, boolean)
    {
        b.a.b.a.a.c $r0;
        b.a.b.a.a.e $r1;
        java.io.OutputStream $r2;
        boolean $z0, $z1;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        org.apache.http.util.ByteArrayBuffer $r5, $r10;
        java.util.List $r6;
        java.util.Iterator $r7, $r14;
        java.lang.Object $r8;
        b.a.b.a.a.a $r9;
        b.a.b.a.a.b $r11;
        int[] $r12;
        int $i0;
        b.a.b.a.a.a.b $r13;
        b.a.b.a.a.g $r15;

        $r0 := @this: b.a.b.a.a.c;

        $r1 := @parameter0: b.a.b.a.a.e;

        $r2 := @parameter1: java.io.OutputStream;

        $z0 := @parameter2: boolean;

        $r3 = $r0.<b.a.b.a.a.c: java.nio.charset.Charset e>;

        $r4 = $r0.<b.a.b.a.a.c: java.lang.String f>;

        $r5 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r3, $r4);

        $r6 = $r0.<b.a.b.a.a.c: java.util.List g>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (b.a.b.a.a.a) $r8;

        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer c>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        $r11 = virtualinvoke $r9.<b.a.b.a.a.a: b.a.b.a.a.b b()>();

        $r12 = <b.a.b.a.a.d: int[] a>;

        $i0 = virtualinvoke $r1.<b.a.b.a.a.e: int ordinal()>();

        $i0 = $r12[$i0];

        lookupswitch($i0)
        {
            case 1: goto label4;
            case 2: goto label6;
            default: goto label2;
        };

     label2:
        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        if $z0 == 0 goto label3;

        $r13 = virtualinvoke $r9.<b.a.b.a.a.a: b.a.b.a.a.a.b a()>();

        interfaceinvoke $r13.<b.a.b.a.a.a.b: void a(java.io.OutputStream)>($r2);

     label3:
        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        goto label1;

     label4:
        $r14 = virtualinvoke $r11.<b.a.b.a.a.b: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (b.a.b.a.a.g) $r8;

        $r4 = virtualinvoke $r15.<b.a.b.a.a.g: java.lang.String a()>();

        staticinvoke <b.a.b.a.a.c: void a(java.lang.String,java.io.OutputStream)>($r4, $r2);

        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        $r4 = virtualinvoke $r15.<b.a.b.a.a.g: java.lang.String b()>();

        staticinvoke <b.a.b.a.a.c: void a(java.lang.String,java.io.OutputStream)>($r4, $r2);

        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        goto label5;

     label6:
        $r11 = virtualinvoke $r9.<b.a.b.a.a.a: b.a.b.a.a.b b()>();

        $r15 = virtualinvoke $r11.<b.a.b.a.a.b: b.a.b.a.a.g a(java.lang.String)>("Content-Disposition");

        $r3 = $r0.<b.a.b.a.a.c: java.nio.charset.Charset e>;

        staticinvoke <b.a.b.a.a.c: void a(b.a.b.a.a.g,java.nio.charset.Charset,java.io.OutputStream)>($r15, $r3, $r2);

        $r13 = virtualinvoke $r9.<b.a.b.a.a.a: b.a.b.a.a.a.b a()>();

        $r4 = interfaceinvoke $r13.<b.a.b.a.a.a.b: java.lang.String b()>();

        if $r4 == null goto label2;

        $r11 = virtualinvoke $r9.<b.a.b.a.a.a: b.a.b.a.a.b b()>();

        $r15 = virtualinvoke $r11.<b.a.b.a.a.b: b.a.b.a.a.g a(java.lang.String)>("Content-Type");

        $r3 = $r0.<b.a.b.a.a.c: java.nio.charset.Charset e>;

        staticinvoke <b.a.b.a.a.c: void a(b.a.b.a.a.g,java.nio.charset.Charset,java.io.OutputStream)>($r15, $r3, $r2);

        goto label2;

     label7:
        $r10 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer c>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r10, $r2);

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r5 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer c>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        $r5 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r5, $r2);

        return;
    }

    private static void a(b.a.b.a.a.g, java.nio.charset.Charset, java.io.OutputStream)
    {
        b.a.b.a.a.g $r0;
        java.nio.charset.Charset $r1;
        java.io.OutputStream $r2;
        java.lang.String $r3;
        org.apache.http.util.ByteArrayBuffer $r4;

        $r0 := @parameter0: b.a.b.a.a.g;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = virtualinvoke $r0.<b.a.b.a.a.g: java.lang.String a()>();

        staticinvoke <b.a.b.a.a.c: void a(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r3, $r1, $r2);

        $r4 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r4, $r2);

        $r3 = virtualinvoke $r0.<b.a.b.a.a.g: java.lang.String b()>();

        staticinvoke <b.a.b.a.a.c: void a(java.lang.String,java.nio.charset.Charset,java.io.OutputStream)>($r3, $r1, $r2);

        $r4 = <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer b>;

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r4, $r2);

        return;
    }

    private static void a(java.lang.String, java.io.OutputStream)
    {
        java.lang.String $r0;
        java.io.OutputStream $r1;
        org.apache.http.util.ByteArrayBuffer $r2;
        java.nio.charset.Charset $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.io.OutputStream;

        $r3 = <b.a.b.a.a.f: java.nio.charset.Charset a>;

        $r2 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r3, $r0);

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r2, $r1);

        return;
    }

    private static void a(java.lang.String, java.nio.charset.Charset, java.io.OutputStream)
    {
        java.lang.String $r0;
        java.nio.charset.Charset $r1;
        java.io.OutputStream $r2;
        org.apache.http.util.ByteArrayBuffer $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.nio.charset.Charset;

        $r2 := @parameter2: java.io.OutputStream;

        $r3 = staticinvoke <b.a.b.a.a.c: org.apache.http.util.ByteArrayBuffer a(java.nio.charset.Charset,java.lang.String)>($r1, $r0);

        staticinvoke <b.a.b.a.a.c: void a(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream)>($r3, $r2);

        return;
    }

    private static void a(org.apache.http.util.ByteArrayBuffer, java.io.OutputStream)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        java.io.OutputStream $r1;
        byte[] $r2;
        int $i0;

        $r0 := @parameter0: org.apache.http.util.ByteArrayBuffer;

        $r1 := @parameter1: java.io.OutputStream;

        $r2 = virtualinvoke $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $i0 = virtualinvoke $r0.<org.apache.http.util.ByteArrayBuffer: int length()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        return;
    }

    public final java.util.List a()
    {
        b.a.b.a.a.c $r0;
        java.util.List r1;

        $r0 := @this: b.a.b.a.a.c;

        r1 = $r0.<b.a.b.a.a.c: java.util.List g>;

        return r1;
    }

    public final void a(b.a.b.a.a.a)
    {
        b.a.b.a.a.c $r0;
        b.a.b.a.a.a $r1;
        java.util.List $r2;

        $r0 := @this: b.a.b.a.a.c;

        $r1 := @parameter0: b.a.b.a.a.a;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<b.a.b.a.a.c: java.util.List g>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public final void a(java.io.OutputStream)
    {
        b.a.b.a.a.c $r0;
        java.io.OutputStream $r1;
        b.a.b.a.a.e $r2;

        $r0 := @this: b.a.b.a.a.c;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 = $r0.<b.a.b.a.a.c: b.a.b.a.a.e h>;

        specialinvoke $r0.<b.a.b.a.a.c: void a(b.a.b.a.a.e,java.io.OutputStream,boolean)>($r2, $r1, 1);

        return;
    }

    public final long b()
    {
        b.a.b.a.a.c $r0;
        b.a.b.a.a.e $r1;
        byte $b0;
        java.util.List $r2;
        java.util.Iterator $r3;
        long $l1, $l2;
        boolean $z0;
        java.lang.Object $r4;
        b.a.b.a.a.a $r5;
        b.a.b.a.a.a.b $r6;
        java.io.ByteArrayOutputStream $r7;
        byte[] $r8;
        int $i3;
        java.io.IOException $r9;

        $r0 := @this: b.a.b.a.a.c;

        $r2 = $r0.<b.a.b.a.a.c: java.util.List g>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        $l1 = 0L;

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (b.a.b.a.a.a) $r4;

        $r6 = virtualinvoke $r5.<b.a.b.a.a.a: b.a.b.a.a.a.b a()>();

        $l2 = interfaceinvoke $r6.<b.a.b.a.a.a.b: long e()>();

        $b0 = $l2 cmp 0L;

        if $b0 < 0 goto label2;

        $l1 = $l2 + $l1;

        goto label1;

     label2:
        return -1L;

     label3:
        $r7 = new java.io.ByteArrayOutputStream;

        specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = $r0.<b.a.b.a.a.c: b.a.b.a.a.e h>;

     label4:
        specialinvoke $r0.<b.a.b.a.a.c: void a(b.a.b.a.a.e,java.io.OutputStream,boolean)>($r1, $r7, 0);

        $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        $i3 = lengthof $r8;

        $l2 = (long) $i3;

        $l1 = $l2 + $l1;

        return $l1;

     label6:
        $r9 := @caughtexception;

        return -1L;

        catch java.io.IOException from label4 to label5 with label6;
    }
}

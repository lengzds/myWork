public class com.fasterxml.jackson.databind.ser.std.JsonValueSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer implements com.fasterxml.jackson.databind.ser.ContextualSerializer
{
    protected final java.lang.reflect.Method _accessorMethod;
    protected final boolean _forceTypeInformation;
    protected final com.fasterxml.jackson.databind.BeanProperty _property;
    protected final com.fasterxml.jackson.databind.JsonSerializer _valueSerializer;

    public void <init>(com.fasterxml.jackson.databind.ser.std.JsonValueSerializer, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer, boolean)
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0, $r1;
        com.fasterxml.jackson.databind.BeanProperty $r2;
        com.fasterxml.jackson.databind.JsonSerializer $r3;
        boolean $z0;
        java.lang.reflect.Method $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 := @parameter0: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r2 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        $r3 := @parameter2: com.fasterxml.jackson.databind.JsonSerializer;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "java/lang/Object");

        $r4 = $r1.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod> = $r4;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer> = $r3;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property> = $r2;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation> = $z0;

        return;
    }

    public void <init>(java.lang.reflect.Method, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0;
        java.lang.reflect.Method $r1;
        com.fasterxml.jackson.databind.JsonSerializer $r2;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 := @parameter0: java.lang.reflect.Method;

        $r2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        specialinvoke $r0.<com.fasterxml.jackson.databind.ser.std.StdSerializer: void <init>(java.lang.Class)>(class "java/lang/Object");

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod> = $r1;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer> = $r2;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property> = null;

        $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation> = 1;

        return;
    }

    public com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)
    {
        com.fasterxml.jackson.databind.SerializerProvider $r0;
        com.fasterxml.jackson.databind.BeanProperty $r1, $r2;
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r4;
        com.fasterxml.jackson.databind.MapperFeature $r5;
        boolean $z0;
        java.lang.reflect.Method $r6;
        java.lang.Class $r7;
        int $i0;
        java.lang.reflect.Type $r8;
        com.fasterxml.jackson.databind.JavaType $r9;
        com.fasterxml.jackson.databind.ser.ContextualSerializer $r10;

        $r3 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r0 := @parameter0: com.fasterxml.jackson.databind.SerializerProvider;

        $r1 := @parameter1: com.fasterxml.jackson.databind.BeanProperty;

        $r4 = $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer>;

        if $r4 != null goto label2;

        $r5 = <com.fasterxml.jackson.databind.MapperFeature: com.fasterxml.jackson.databind.MapperFeature USE_STATIC_TYPING>;

        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: boolean isEnabled(com.fasterxml.jackson.databind.MapperFeature)>($r5);

        if $z0 != 0 goto label1;

        $r6 = $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $i0 = virtualinvoke $r7.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0);

        if $z0 == 0 goto label3;

     label1:
        $r6 = $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $r9 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JavaType constructType(java.lang.reflect.Type)>($r8);

        $r2 = $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

        $r4 = virtualinvoke $r0.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)>($r9, 0, $r2);

        $r7 = virtualinvoke $r9.<com.fasterxml.jackson.databind.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean isNaturalTypeWithStdHandling(java.lang.Class,com.fasterxml.jackson.databind.JsonSerializer)>($r7, $r4);

        $r3 = virtualinvoke $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>($r1, $r4, $z0);

        return $r3;

     label2:
        $z0 = $r4 instanceof com.fasterxml.jackson.databind.ser.ContextualSerializer;

        if $z0 == 0 goto label3;

        $r10 = (com.fasterxml.jackson.databind.ser.ContextualSerializer) $r4;

        $r4 = interfaceinvoke $r10.<com.fasterxml.jackson.databind.ser.ContextualSerializer: com.fasterxml.jackson.databind.JsonSerializer createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)>($r0, $r1);

        $z0 = $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

        $r3 = virtualinvoke $r3.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>($r1, $r4, $z0);

     label3:
        return $r3;
    }

    protected boolean isNaturalTypeWithStdHandling(java.lang.Class, com.fasterxml.jackson.databind.JsonSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0;
        java.lang.Class $r1, $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r2;
        boolean $z0;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r1 == $r3 goto label2;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r1 == $r3 goto label2;

        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        if $r1 == $r3 goto label2;

        return 0;

     label1:
        if $r1 == class "java/lang/String" goto label2;

        if $r1 == class "java/lang/Integer" goto label2;

        if $r1 == class "java/lang/Boolean" goto label2;

        if $r1 != class "java/lang/Double" goto label3;

     label2:
        $z0 = virtualinvoke $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer)>($r2);

        return $z0;

     label3:
        return 0;
    }

    public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0;
        java.lang.Object $r1, $r7;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.BeanProperty $r4;
        java.lang.reflect.Method $r5;
        java.lang.Object[] $r6;
        com.fasterxml.jackson.databind.JsonSerializer $r8;
        java.lang.Class $r9;
        java.io.IOException $r10;
        boolean $z0;
        java.lang.Throwable $r11, $r12;
        java.lang.Error $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        com.fasterxml.jackson.databind.JsonMappingException $r16;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

     label01:
        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r6 = newarray (java.lang.Object)[0];

     label02:
        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r6);

     label03:
        if $r7 != null goto label06;

     label04:
        virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>($r2);

     label05:
        return;

     label06:
        $r8 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer>;

     label07:
        if $r8 != null goto label11;

     label08:
        $r9 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

     label09:
        $r4 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

     label10:
        $r8 = virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,com.fasterxml.jackson.databind.BeanProperty)>($r9, 1, $r4);

     label11:
        virtualinvoke $r8.<com.fasterxml.jackson.databind.JsonSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r7, $r2, $r3);

     label12:
        return;

     label13:
        $r10 := @caughtexception;

        throw $r10;

     label14:
        $z0 = $r12 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label15;

        $r11 = virtualinvoke $r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r11 == null goto label15;

        $r12 = virtualinvoke $r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label14;

     label15:
        $z0 = $r12 instanceof java.lang.Error;

        if $z0 == 0 goto label16;

        $r13 = (java.lang.Error) $r12;

        throw $r13;

     label16:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r15 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>($r12, $r1, $r15);

        throw $r16;

     label17:
        $r12 := @caughtexception;

        goto label14;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.Exception from label01 to label03 with label17;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Exception from label08 to label11 with label17;
        catch java.lang.Exception from label11 to label12 with label17;
    }

    public void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0;
        java.lang.Object $r1, $r8;
        com.fasterxml.jackson.core.JsonGenerator $r2;
        com.fasterxml.jackson.databind.SerializerProvider $r3;
        com.fasterxml.jackson.databind.jsontype.TypeSerializer $r4;
        com.fasterxml.jackson.databind.BeanProperty $r5;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7;
        com.fasterxml.jackson.databind.JsonSerializer $r9;
        boolean $z0;
        java.io.IOException $r10;
        java.lang.Class $r11;
        java.lang.Throwable $r12, $r13;
        java.lang.Error $r14;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;
        com.fasterxml.jackson.databind.JsonMappingException $r17;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.fasterxml.jackson.core.JsonGenerator;

        $r3 := @parameter2: com.fasterxml.jackson.databind.SerializerProvider;

        $r4 := @parameter3: com.fasterxml.jackson.databind.jsontype.TypeSerializer;

     label01:
        $r6 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r7 = newarray (java.lang.Object)[0];

     label02:
        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r1, $r7);

     label03:
        if $r8 != null goto label06;

     label04:
        virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: void defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)>($r2);

     label05:
        return;

     label06:
        $r9 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer>;

     label07:
        if $r9 == null goto label17;

     label08:
        $z0 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

     label09:
        if $z0 == 0 goto label11;

     label10:
        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypePrefixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

     label11:
        virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonSerializer: void serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)>($r8, $r2, $r3, $r4);

     label12:
        $z0 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

     label13:
        if $z0 == 0 goto label25;

     label14:
        virtualinvoke $r4.<com.fasterxml.jackson.databind.jsontype.TypeSerializer: void writeTypeSuffixForScalar(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)>($r1, $r2);

     label15:
        return;

     label16:
        $r10 := @caughtexception;

        throw $r10;

     label17:
        $r11 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

     label18:
        $r5 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

     label19:
        $r9 = virtualinvoke $r3.<com.fasterxml.jackson.databind.SerializerProvider: com.fasterxml.jackson.databind.JsonSerializer findTypedValueSerializer(java.lang.Class,boolean,com.fasterxml.jackson.databind.BeanProperty)>($r11, 1, $r5);

        virtualinvoke $r9.<com.fasterxml.jackson.databind.JsonSerializer: void serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)>($r8, $r2, $r3);

     label20:
        return;

     label21:
        $r12 := @caughtexception;

     label22:
        $z0 = $r12 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label23;

        $r13 = virtualinvoke $r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r13 == null goto label23;

        $r12 = virtualinvoke $r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label22;

     label23:
        $z0 = $r12 instanceof java.lang.Error;

        if $z0 == 0 goto label24;

        $r14 = (java.lang.Error) $r12;

        throw $r14;

     label24:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r6 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r16 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <com.fasterxml.jackson.databind.JsonMappingException: com.fasterxml.jackson.databind.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,java.lang.String)>($r12, $r1, $r16);

        throw $r17;

     label25:
        return;

        catch java.io.IOException from label02 to label03 with label16;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.io.IOException from label10 to label12 with label16;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Exception from label01 to label03 with label21;
        catch java.lang.Exception from label04 to label05 with label21;
        catch java.lang.Exception from label06 to label07 with label21;
        catch java.lang.Exception from label08 to label09 with label21;
        catch java.lang.Exception from label10 to label13 with label21;
        catch java.lang.Exception from label14 to label15 with label21;
        catch java.io.IOException from label17 to label18 with label16;
        catch java.io.IOException from label19 to label20 with label16;
        catch java.lang.Exception from label17 to label20 with label21;
    }

    public java.lang.String toString()
    {
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r0;
        java.lang.StringBuilder $r1;
        java.lang.reflect.Method $r2;
        java.lang.Class $r3;
        java.lang.String $r4;

        $r0 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("(@JsonValue serializer for method ");

        $r2 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r2 = $r0.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: java.lang.reflect.Method _accessorMethod>;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public com.fasterxml.jackson.databind.ser.std.JsonValueSerializer withResolved(com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer, boolean)
    {
        com.fasterxml.jackson.databind.BeanProperty $r0, $r3;
        com.fasterxml.jackson.databind.JsonSerializer $r1, $r4;
        boolean $z0, $z1;
        com.fasterxml.jackson.databind.ser.std.JsonValueSerializer $r2, $r5;

        $r2 := @this: com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        $r0 := @parameter0: com.fasterxml.jackson.databind.BeanProperty;

        $r1 := @parameter1: com.fasterxml.jackson.databind.JsonSerializer;

        $z0 := @parameter2: boolean;

        $r3 = $r2.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.BeanProperty _property>;

        if $r3 != $r0 goto label1;

        $r4 = $r2.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: com.fasterxml.jackson.databind.JsonSerializer _valueSerializer>;

        if $r4 != $r1 goto label1;

        $z1 = $r2.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: boolean _forceTypeInformation>;

        if $z0 != $z1 goto label1;

        return $r2;

     label1:
        $r5 = new com.fasterxml.jackson.databind.ser.std.JsonValueSerializer;

        specialinvoke $r5.<com.fasterxml.jackson.databind.ser.std.JsonValueSerializer: void <init>(com.fasterxml.jackson.databind.ser.std.JsonValueSerializer,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer,boolean)>($r2, $r0, $r1, $z0);

        return $r5;
    }
}
